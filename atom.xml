<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>桥头打字员</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-17T09:29:48.922Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Henry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GStreamer学习笔记--GObject类对象</title>
    <link href="http://example.com/2021/07/17/gstreamer%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Gobject%E7%B1%BB%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2021/07/17/gstreamer%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Gobject%E7%B1%BB%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-07-17T08:48:47.000Z</published>
    <updated>2021-07-17T09:29:48.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GStreamer学习笔记–GObject类对象"><a href="#GStreamer学习笔记–GObject类对象" class="headerlink" title="GStreamer学习笔记–GObject类对象"></a>GStreamer学习笔记–GObject类对象</h1><h2 id="Gobject类定义"><a href="#Gobject类定义" class="headerlink" title="Gobject类定义"></a>Gobject类定义</h2><p>维基百科：<strong>GObject</strong>，是一个在<a href="https://zh.wikipedia.org/wiki/LGPL">LGPL</a>下发布的<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6">自由</a><a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%BA%93">软件库</a>，它提供了一个轻便的<a href="https://zh.wikipedia.org/w/index.php?title=%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F&action=edit&redlink=1">对象系统</a>并支持透明的多语言互通。GObject被设计为可以直接使用在<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C</a>程序中，也可以被封装至其他语言，例如<a href="https://zh.wikipedia.org/wiki/C%2B%2B">C++</a>，<a href="https://zh.wikipedia.org/wiki/Java">Java</a>，<a href="https://zh.wikipedia.org/wiki/Python">Python</a>，以及可以生成C代码的<a href="https://zh.wikipedia.org/wiki/Vala">Vala</a>（由此大大简化了<code>GObject</code>代码的书写）等等。</p><p><code>Gstreamer</code>框架是基于插件的，同时插件是可以动态的注册、创建，<code>gstreamer</code>基于<code>Gobject</code>开发，下面来了解一下<code>gstreamer</code>是如何通过<code>Gobject</code>完成自定义类的注册。</p><p>在每个类的<code>c</code>文件中，都会有以下这样的一个宏定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">G_DEFINE_TYPE (GstV4l2Allocator, gst_v4l2_allocator, GST_TYPE_ALLOCATOR);</span><br></pre></td></tr></table></figure><p><code>G_DEFINE_TYPE</code>是一个宏定义，那么这个<code>G_DEFINE_TYPE</code>宏是如何完成向<code>Gobject</code>系统完成类的注册呢？</p><p>将<code>G_DEFINE_TYPE</code>展开可以看到以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G_DEFINE_TYPE(TN, t_n, T_P)</span></span><br><span class="line"><span class="comment">/******* </span></span><br><span class="line"><span class="comment"> *TN  ---&gt; TypeName</span></span><br><span class="line"><span class="comment"> *t_n ---&gt; type_name</span></span><br><span class="line"><span class="comment"> *T_P ---&gt; TYPE_PARENT</span></span><br><span class="line"><span class="comment"> *_f_ ---&gt; 0</span></span><br><span class="line"><span class="comment"> *_c_ ---&gt; &#123;&#125;</span></span><br><span class="line"><span class="comment">******/</span></span><br><span class="line"><span class="comment">/*****   以下为宏展开   *****/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span>     type_name##_init              (TypeName        *self); </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span>     type_name##_class_init        (TypeName##Class *klass); </span><br><span class="line"><span class="keyword">static</span> gpointer type_name##_parent_class = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">static</span> gint     TypeName##_private_offset;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span>     type_name##_class_intern_init (gpointer klass)</span><br><span class="line">&#123;</span><br><span class="line">  type_name##_parent_class = g_type_class_peek_parent (klass);</span><br><span class="line">  <span class="keyword">if</span> (TypeName##_private_offset != <span class="number">0</span>)</span><br><span class="line">    g_type_class_adjust_private_offset (klass, &amp;TypeName##_private_offset);</span><br><span class="line">  type_name##_class_init ((TypeName##Class*) klass);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> gpointer</span><br><span class="line">type_name##_get_instance_private (TypeName *self)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (G_STRUCT_MEMBER_P (self, TypeName##_private_offset));</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">GType </span><br><span class="line">type_name##_get_type (<span class="keyword">void</span>) </span><br><span class="line">&#123; </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">volatile</span> gsize g_define_type_id__volatile = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* Prelude goes here */</span></span><br><span class="line">  <span class="keyword">if</span> (g_once_init_enter (&amp;g_define_type_id__volatile))</span><br><span class="line">    &#123;</span><br><span class="line">      GType g_define_type_id =</span><br><span class="line">        g_type_register_static_simple (TYPE_PARENT,</span><br><span class="line">                                       g_intern_static_string (#TypeName),</span><br><span class="line">                                       <span class="keyword">sizeof</span> (TypeName##Class),</span><br><span class="line">                                       (GClassInitFunc)(<span class="keyword">void</span> (*)(<span class="keyword">void</span>)) type_name##_class_intern_init,</span><br><span class="line">                                       <span class="keyword">sizeof</span> (TypeName),</span><br><span class="line">                                       (GInstanceInitFunc)(<span class="keyword">void</span> (*)(<span class="keyword">void</span>)) type_name##_init,</span><br><span class="line">                                       (GTypeFlags) flags);</span><br><span class="line">      &#123; <span class="comment">/* custom code follows */</span></span><br><span class="line">      &#123;_C_;&#125;</span><br><span class="line">        <span class="comment">/* following custom code */</span></span><br><span class="line">      &#125;</span><br><span class="line">      g_once_init_leave (&amp;g_define_type_id__volatile, g_define_type_id);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> g_define_type_id__volatile;</span><br><span class="line">&#125; <span class="comment">/* closes type_name##_get_type() */</span></span><br></pre></td></tr></table></figure><h2 id="向Gobject系统注册类"><a href="#向Gobject系统注册类" class="headerlink" title="向Gobject系统注册类"></a>向Gobject系统注册类</h2><p><code>G_DEFINE_TYPE</code>定义如上，那么，最终它是如何向<code>Gobject</code>系统注册该类的呢？<br><code>Gobject</code>系统为什么知道你新添加了一个名叫<code>TypeName</code>的类，是因为你通过<code>g_type_register_static_simple()</code>函数告诉它，我这里有一个新类，你登记一下<code>g_type_register_static_simple()</code>函数声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">GLIB_AVAILABLE_IN_ALL</span></span><br><span class="line"><span class="function">GType <span class="title">g_type_register_static_simple</span>     <span class="params">(GType                       parent_type,</span></span></span><br><span class="line"><span class="params"><span class="function"> <span class="keyword">const</span> gchar                *type_name,</span></span></span><br><span class="line"><span class="params"><span class="function"> guint                       class_size,</span></span></span><br><span class="line"><span class="params"><span class="function"> GClassInitFunc              class_init,</span></span></span><br><span class="line"><span class="params"><span class="function"> guint                       instance_size,</span></span></span><br><span class="line"><span class="params"><span class="function"> GInstanceInitFunc           instance_init,</span></span></span><br><span class="line"><span class="params"><span class="function"> GTypeFlags             flags)</span></span>;</span><br></pre></td></tr></table></figure><p>函数声明的前面<code>GLIB_AVAILABLE_IN_ALL</code>就是一个<code>extern</code>关键词，从函数声明我们可以了解到，向<code>Gobject</code>系统注册一个类，需要告诉<code>Gobject</code>系统，我现在需要注册一个新类，它父类的类型是<code>parent_type</code>，大小是<code>class_size</code>，类的初始化函数是<code>class_init</code>，类的实例大小以及初始化函数，还有这个类有什么<code>flags</code>，通过告诉<code>Gobject</code>，它就会将新类登记在线。</p><p>通过<code>G_DEFINE_TYPE</code>宏的展开可以知道，在<code>type_name##_get_type()</code>函数中调用到<code>g_type_register_static_simple()</code>函数，那么，究竟是什么时候，程序会向<code>Gobject</code>系统注册该新类呢？<br>比如我们是要注册一个名叫<code>TestObject</code>的类，那么就是通过<code>TestObject_get_type()</code>函数完成<code>estObject</code>的注册登记。<br>在我们需要创建一个<code>TestObject</code>的实例时，会通过调用<code>g_object_new()</code>函数完成，在调用<code>g_object_new</code>函数，需要传进相应的参数，这个时候，我们就将<code>TestObject_get_type()</code>函数的返回值传递给它，即演变成以下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TestObject *testObject = （TestObject *）g_object_new (TestObject_get_type(), <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>在创建<code>TestObject</code>实例对象的时候，将会调用<code>TestObject_get_type()</code>函数得到相应的类型，而在<code>TestObject_get_type()</code>函数中，将会先通过<code>g_once_init_enter()</code>函数检查<code>TestObject_get_type()</code>中的静态变量<code>g_define_type_id_volatile</code>是否为0，如果是，则通过<code>g_type_register_static_simple()</code>函数向<code>Gobject</code>系统登记<code>TestObject</code>类，同时返回<code>object ID</code>，如果<code>g_define_type_id_volatile</code>不为0，则说明已经向<code>Gobject</code>系统注册<code>TestObjec</code>t类，直接返回<code>object ID</code>，这样，即完成了<code>TestObject</code>的注册登记。</p><h2 id="类的构造函数"><a href="#类的构造函数" class="headerlink" title="类的构造函数"></a>类的构造函数</h2><p>学习<code>C++</code>我们都知道，类是有构造函数的，在创建类实例的时候，会自动调用该类的构造函数，那么，在<code>Gobject</code>中，又是怎么调用类的构造函数呢？</p><p>以<code>TestObject</code>为例，在上面说到通过<code>g_type_register_static_simple()</code>函数向<code>Gobject</code>系统注册自定义类的时候，就传进了相应的参数，包括类的初始化函数<code>test_object_class_intern_init()</code>以及类实例的初始化函数<code>test_object_init()</code>，它们两个共同的相当于<code>TestObject</code>类的构造函数。从宏定义<code>G_DEFINE_TYPE</code>的展开代码中发现以下函数声明以及<code>test_object_class_intern_init()</code>函数的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>     <span class="title">test_object_init</span>              <span class="params">(TestObject      *self)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>     <span class="title">test_object_class_init</span>        <span class="params">(TestObjectClass *klass)</span></span>; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>     <span class="title">test_object_class_intern_init</span> <span class="params">(gpointer klass)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  test_object_parent_class = g_type_class_peek_parent (klass);</span><br><span class="line">  <span class="keyword">if</span> (test_object_private_offset != <span class="number">0</span>)</span><br><span class="line">    g_type_class_adjust_private_offset (klass, &amp;TestObject_private_offset);</span><br><span class="line">  test_object_class_init ((TestObjectClass*) klass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述代码我们可以知道，在通过<code>G_DEFINE_TYPE</code>向<code>Gobject</code>系统注册类，还需要我们实现<code>test_object_class_init()</code>和<code>test_object_init()</code>函数的定义。<code>test_object_class_init()</code>函数是在第一次创建<code>TestObject</code>类实例对象的时候调用的，该函数只会调用一次，而<code>test_object_init()</code>函数则是每次创建<code>TestObject</code>类实例对象都会调用。</p><h2 id="类的继承关系"><a href="#类的继承关系" class="headerlink" title="类的继承关系"></a>类的继承关系</h2><p>在<code>G_DEFINE_TYPE</code>的展开代码中，可以看到以下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> gpointer type_name##_parent_class = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span>     type_name##_class_intern_init (gpointer klass)</span><br><span class="line">&#123;</span><br><span class="line">  type_name##_parent_class = g_type_class_peek_parent (klass);</span><br><span class="line">  <span class="keyword">if</span> (TypeName##_private_offset != <span class="number">0</span>)</span><br><span class="line">    g_type_class_adjust_private_offset (klass, &amp;TypeName##_private_offset);</span><br><span class="line">  type_name##_class_init ((TypeName##Class*) klass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个宏中，可以看到定义了一个静态的全局指针变量<code>type_name_parent_class</code>，而<code>type_name_parent_class</code>变量是通过<code>g_type_class_peek_parent()</code>函数赋值的，<code>type_name_parent_class</code>变量代表着什么呢，它就是父类。一般的，会在该源文件新增一个宏，定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> type_name##_parent_class parent_class</span></span><br></pre></td></tr></table></figure><p>这样就可以通过宏定义<code>parent_class</code>直接调用父类函数，而该父类，就是在通过宏定义<code>G_DEFINE_TYPE</code>向<code>Gobject</code>系统注册类时传进的第三个参数<code>T_P</code>。<code>g_type_class_peek_parent()</code>函数通过传进的子类指针，查找到注册时候的相应信息，得到父类的类型，而后通过父类类型得到父类信息并返回。</p><h2 id="类的析构函数"><a href="#类的析构函数" class="headerlink" title="类的析构函数"></a>类的析构函数</h2><p>有了相应的构造函数，在构造函数中申请了内存、硬件等资源，自然的，也会类似<code>C++</code>的，有相应的析构函数负责资源的释放操作。那么，在<code>Gobject</code>系统中，析构函数又是什么回事呢？我们都知道，构造函数是从父类到子类，而析构函数是从子类到父类。在<code>Gobject</code>系统中的析构函数又是如何的呢？</p><p>之前说到，在通过<code>G_DEFINE_TYPE</code>向<code>Gobject</code>系统，注册<code>TestObject</code>类的时候，需要定义<code>test_object_class_init()</code>和<code>test_object_init()</code>函数，而在类实例的初始化函数<code>test_object_init()</code>中，我们可能申请了一些内存等资源，我们需要在析构函数中释放这些资源，这个时候，需要我们在<code>TestObject</code>类初始化函数<code>test_object_class_init()</code>覆盖从父类继承的析构函数，具体代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static void</span><br><span class="line">test_object_dispose (GObject * object)</span><br><span class="line">&#123;</span><br><span class="line">TestObject *testobject = TEST_OBJECT (object);</span><br><span class="line"> </span><br><span class="line">/*  资源释放*/</span><br><span class="line"> </span><br><span class="line">/*  调用父类的dispose 函数 */</span><br><span class="line">G_OBJECT_CLASS (parent_class)-&gt;dispose (object);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">static void</span><br><span class="line">test_object_finalize (TestObject * testobject)</span><br><span class="line">&#123;</span><br><span class="line">g_free(testobject-&gt;mem);</span><br><span class="line"></span><br><span class="line">    /*  调用父类的finalize 函数 */</span><br><span class="line">G_OBJECT_CLASS (parent_class)-&gt;finalize (object);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">static void test_object_init(TestObject * self)</span><br><span class="line">&#123;</span><br><span class="line">self-&gt;mem = g_malloc (1);</span><br><span class="line">&#125;</span><br><span class="line">static void test_object_class_init(TestObjectClass *klass)</span><br><span class="line">&#123;</span><br><span class="line">GObjectClass *object_class = G_OBJECT_CLASS (klass);</span><br><span class="line"> </span><br><span class="line">object_class-&gt;dispose = test_object_dispose;</span><br><span class="line">object_class-&gt;finalize = test_object_finalize;</span><br><span class="line"> </span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上述代码我们可以知道，在<code>TestObject</code>的初始化的时候，将会覆盖从父类继承而来的析构函数，同时在析构函数中释放类实例初始化时占用的资源，同时还有递归调用父类的析构函数。<code>dispose</code>函数主要是将在类中占用的资源释放，而<code>finalize</code>函数则是有点类似真正的析构函数，将构造函数申请的资源进行释放回收。</p><p>既然析构函数也已经有了，析构函数又会是什么时候调用呢？</p><p><code> JAVA</code>使用的是垃圾回收的机制，而<code>Gobjec</code>t则是使用引用计数的方式。当每个对象创建的时候，将会对其引用计数加一，如果期间被其他对象进行引用，也都会将它的引用计数增加；而当对象被解除引用的时候，引用计数将会减一，当引用计数减为0的时候，将会调用对象的析构函数，进行资源的回收。</p><p><code>Gobject</code>的引用计数方式大致如下：</p><ul><li>使用<code>g_object_new()</code>函数进行实例化的时候，对象的引用计数为1；</li><li>使用<code>g_object_ref()</code>函数进行引用对象的时候，对象的引用计数加1；</li><li>使用<code>g_object_unref()</code>函数解除引用的时候，对象的引用计数减1；</li><li>调用<code>g_object_unref()</code>函数进行解引用的时候，如果发现对象的引用计数为0，将会先后调用该对象的<code>dispose()</code>函数和<code>finalize()</code>函数。</li></ul><p>而为什么在<code>test_object_class_init()</code>函数中覆盖从父类继承过来的析构函数呢？<br>因为在<code>g_object_unref()</code>函数中调用<code>dispose()</code>函数和<code>finalize()</code>函数是通过宏定义<code>G_OBJECT_GET_CLASS取得OBJECT_CLASS</code>类之后，再调用它的<code>dispose()</code>函数和<code>finalize()</code>函数，所以需要在<code>TestObject</code>的类初始化函数对这两个函数指针进行覆盖，而在<code>TestObject</code>类的<code>dispose()</code>函数和<code>finalize()</code>函数再通过<code>G_OBJECT_CLASS (parent_class)</code>取得父类指针，调用父类的析构函数。</p><h2 id="类的其他设置"><a href="#类的其他设置" class="headerlink" title="类的其他设置"></a>类的其他设置</h2><p>在<code>Gobject</code>系统中，设置了很多方便的宏，使在使用对象的时候可以更加的方便，在相应的头文件，一般会有如下宏定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">GstTestObject</span> <span class="title">TestObject</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">GstTestObjectClass</span> <span class="title">GstTestObjectClass</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 获取类型 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GST_TYPE_TEST_OBJECT      (test_object_get_type())</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 类实例类型判断 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GST_IS_TEST_OBJECT(obj)   (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_TEST_OBJECT))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 类结构判定 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GST_IS_TEST_OBJECT_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_TEST_OBJECT))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 获取obj的类型，同时将其转换为GST_TYPE_TEST_OBJECT，并返回指向GstTestObjectClass的指针 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GST_TEST_OBJECT_GET_CLASS(obj)       (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_TEST_OBJECT, GstTestObjectClass))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 检查obj是否是GST_TYPE_TEST_OBJECT类型，如果是，则将返回指向obj成员变量TestObject的指针 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GST_TEST_OBJECT(obj)      (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_TEST_OBJECT, TestObject))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 检查klass是不是GST_TYPE_TEST_OBJECT类型，如果是，则将返回指向klass成员变量GstTestObjectClass的指针 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GST_TEST_OBJECT_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_TEST_OBJECT, GstTestObjectClass))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 实例结构转换 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GST_TEST_OBJECT_CAST(obj) ((TestObject*)(obj))</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">GstTestObject</span> &#123;</span></span><br><span class="line">  GstObject            object;</span><br><span class="line">  gchar *mem;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 类定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">GstTestObjectClass</span> &#123;</span></span><br><span class="line">  GstObjectClass    object_class;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是通过上述的宏定义，可以方便的将各种类以及对象进行转换，在子类中可以调用父类的函数等操作，同时，在<code>gstreamer</code>中，还有一些属性设置函数等，进行多样化的类管理。</p><p>另外的，宏定义<code>G_DEFINE_TYPE_WITH_CODE</code>也是实现与<code>G_DEFINE_TYP</code>类似的功能，只不过是可以将一些函数内置在<code>type_name##_get_type()</code>函数中。</p>]]></content>
    
    
    <summary type="html">GObject 设计用于直接在C程序中使用以提供面向对象的基于C的API，并通过与其他语言的绑定来提供透明的跨语言互操作性，例如PyGObject。</summary>
    
    
    
    <category term="Internship" scheme="http://example.com/categories/Internship/"/>
    
    
    <category term="GStreamer" scheme="http://example.com/tags/GStreamer/"/>
    
    <category term="GObject" scheme="http://example.com/tags/GObject/"/>
    
  </entry>
  
  <entry>
    <title>Deepstream 检测安全帽👷</title>
    <link href="http://example.com/2021/07/10/week-2-2/"/>
    <id>http://example.com/2021/07/10/week-2-2/</id>
    <published>2021-07-10T05:32:29.000Z</published>
    <updated>2021-07-14T11:57:38.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Yolov3-检测安全帽"><a href="#Yolov3-检测安全帽" class="headerlink" title="Yolov3 检测安全帽"></a>Yolov3 检测安全帽</h1><h2 id="运行自带yolov3示例"><a href="#运行自带yolov3示例" class="headerlink" title="运行自带yolov3示例"></a>运行自带yolov3示例</h2><h3 id="环境和示例说明"><a href="#环境和示例说明" class="headerlink" title="环境和示例说明"></a>环境和示例说明</h3><p><strong>该示例是Deepstream-5.0在Jetson Xavier NX上运行，具体环境部署可以参见<a href="https://xuhuigeren.github.io/2021/07/02/week-1/">这里</a>.</strong></p><p>示例文件在<code>deepstram-5.0\sources\objectDetector_Yolo</code>目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">|-- objectDetector_Yolo</span><br><span class="line">|   |-- config_infer_primary_yoloV2.txt</span><br><span class="line">|   |-- config_infer_primary_yoloV2_tiny.txt</span><br><span class="line">|   |-- config_infer_primary_yoloV3.txt</span><br><span class="line">|   |-- config_infer_primary_yoloV3_tiny.txt</span><br><span class="line">|   |-- deepstream_app_config_yoloV2.txt</span><br><span class="line">|   |-- deepstream_app_config_yoloV2_tiny.txt</span><br><span class="line">|   |-- deepstream_app_config_yoloV3.txt</span><br><span class="line">|   |-- deepstream_app_config_yoloV3_tiny.txt</span><br><span class="line">|   |-- labels.txt</span><br><span class="line">|   |-- prebuild.sh</span><br><span class="line">|   |-- README</span><br><span class="line">|   |-- yolov3-calibration.table.trt7.0</span><br><span class="line">|   |-- nvdsinfer_custom_impl_Yolo             </span><br><span class="line">|       |-- Makefile</span><br><span class="line">|       |-- kernels.cu</span><br><span class="line">|       |-- nvdsinfer_yolo_engine.cpp</span><br><span class="line">|       |-- nvdsparsebbox_Yolo.cpp</span><br><span class="line">|       |-- trt_utils.cpp</span><br><span class="line">|       |-- trt_utils.h</span><br><span class="line">|       |-- yolo.cpp</span><br><span class="line">|       |-- yolo.h</span><br><span class="line">|       |-- yoloPlugins.cpp</span><br><span class="line">|       |-- yoloPlugins.h</span><br></pre></td></tr></table></figure><p><strong>当然是先康康<code>README</code>，果然写的非常细致详尽，介绍了文件目录中每个文件的含义</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Sample contents:</span><br><span class="line">- deepstream_app_config_yolo[V3,V3_tiny,V2,V2_tiny,tlt].txt - DeepStream reference</span><br><span class="line">  app configuration file for using YoloV2/yoloV2-tiny/yolo/yolo-tiny/tlt model</span><br><span class="line">  as the primary detector.</span><br><span class="line">- config_infer_primary_yolo[V3,V3_tiny,V2,V2_tiny,tlt].txt - Configuration file for the GStreamer</span><br><span class="line">  nvinfer plugin for the Yolo detector model.</span><br><span class="line">- yolov3-calibration.table.trt7.0 - yoloV3 INT8 calibration binary on TensorRT 7.0+</span><br><span class="line">- nvdsinfer_custom_impl_Yolo/nvdsinfer_yolo_engine.cpp -</span><br><span class="line">  Implementation of &#x27;NvDsInferCreateModelParser&#x27;/IModelParser for nvdsinfer to</span><br><span class="line">  parse custom models. Alternatively, also contains implementation of</span><br><span class="line">  &#x27;NvDsInferYoloCudaEngineGet&#x27; for nvdsinfer to directly create cuda engine.</span><br><span class="line">  To use the &#x27;NvDsInferYoloCudaEngineGet&#x27; interface, enable the macro</span><br><span class="line">  USE_CUDA_ENGINE_GET_API in nvdsinfer_yolo_engine.cpp</span><br><span class="line">- nvdsinfer_custom_impl_Yolo/nvdsparsebbox_Yolo.cpp - Output layer</span><br><span class="line">  parsing function for detected objects for the Yolo model.</span><br><span class="line">- nvdsinfer_custom_impl_Yolo/yoloPlugins.h -</span><br><span class="line">  Declaration of YoloLayerV3 and YoloLayerV3PluginCreator.</span><br><span class="line">- nvdsinfer_custom_impl_Yolo/yoloPlugins.cpp -</span><br><span class="line">  Implementation of YoloLayerV3 and YoloLayerV3PluginCreator.</span><br><span class="line">- nvdsinfer_custom_impl_Yolo/kernels.cu - Implementation of cuda kernels for</span><br><span class="line">- nvdsinfer_custom_impl_Yolo/trt_utils.h - Utilities to setup tensorRT networks</span><br><span class="line">- nvdsinfer_custom_impl_Yolo/trt_utils.cpp - Implementation of Utilities to setup</span><br><span class="line">   tensorRT networks</span><br><span class="line">- nvdsinfer_custom_impl_Yolo/yolo.h - Interface to create Yolo Cuda-Engine</span><br><span class="line">- nvdsinfer_custom_impl_Yolo/yolo.cpp - Implementation to create Yolo Cuda-Engine</span><br></pre></td></tr></table></figure><p><strong>下载权重和配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Pre-requisites:</span><br><span class="line">- Download yolo config and weights files</span><br><span class="line">  $ ./prebuild.sh         # 可以把脚本里的不需要的部分注释掉，提高下载速度。</span><br><span class="line">- Set correct yolo config/weights file in config_infer_primary_yolo[...].txt.</span><br><span class="line">    custom-network-config # path to yolo config</span><br><span class="line">    model-file # path to yolo weights</span><br><span class="line">- Enable INT8 precision detection if there is a calibration cache file, update</span><br><span class="line">  config_infer_primary_yolo[...].txt.</span><br><span class="line">    int8-calib-file=yolo[...]-calibration.table.trt5.1</span><br><span class="line">- Other INT8 precision calibration table need to be calibrated by user.</span><br><span class="line">- The yolo-tlt sample makes use of a few TensorRT OSS plugins. Download the</span><br><span class="line">  TensorRT OSS repo (https://github.com/NVIDIA/TensorRT/) and checkout the</span><br><span class="line">  &#x27;release/7.0&#x27; branch. Follow the instructions in the README to build the</span><br><span class="line">  plugin library &#x27;libnvinfer_plugin.so.7.0.0&#x27; corresponding to your dGPU/Jetson</span><br><span class="line">  platform. This library needs to be used with LD_PRELOAD to let nvinfer plugin</span><br><span class="line">  access the TRT OSS plugin layers.</span><br><span class="line">- Set the path of the etlt model (tlt-encoded-model) and the tlt model key</span><br><span class="line">  (tlt-model-key) in config_infer_primary_yolo_tlt.txt before running the sample.</span><br></pre></td></tr></table></figure><p><strong>编译工程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Compile the custom library:</span><br><span class="line">  # Based on the API to use &#x27;NvDsInferCreateModelParser&#x27; or &#x27;NvDsInferCudaEngineGet&#x27;</span><br><span class="line">  # set the macro USE_CUDA_ENGINE_GET_API to 0 or 1 in</span><br><span class="line">  # nvdsinfer_custom_impl_Yolo/nvdsinfer_yolo_engine.cpp</span><br><span class="line"></span><br><span class="line">  # Export correct CUDA version (e.g. 10.2, 10.1)</span><br><span class="line">  $ export CUDA_VER=10.2</span><br><span class="line">  $ make -C nvdsinfer_custom_impl_Yolo</span><br><span class="line">  这时候会在nvdsinfer_custom_impl_Yolo文件夹里生成.so文件</span><br></pre></td></tr></table></figure><p><strong>运行示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Run the sample:</span><br><span class="line">The &quot;nvinfer&quot; config file config_infer_primary_yolo.txt specifies the path to</span><br><span class="line">the custom library and the custom output parsing function through the properties</span><br><span class="line">&quot;custom-lib-path&quot; and &quot;parse-bbox-func-name&quot; respectively.</span><br><span class="line">The first-time a &quot;model_b1_int8.engine&quot; would be generated as the engine-file</span><br><span class="line"></span><br><span class="line">- With deepstream-app</span><br><span class="line">  $ deepstream-app -c deepstream_app_config_yoloV3.txt</span><br><span class="line">  $ deepstream-app -c deepstream_app_config_yoloV3_tiny.txt</span><br><span class="line">  $ deepstream-app -c deepstream_app_config_yoloV2.txt</span><br><span class="line">  $ deepstream-app -c deepstream_app_config_yoloV2_tiny.txt</span><br><span class="line">  $ LD_PRELOAD=&lt;path-to-TRT-OSS-libnvinfer_plugin.so.7.0.0&gt; deepstream-app -c deepstream_app_config_yolo_tlt.txt</span><br></pre></td></tr></table></figure><p><strong>检测结果</strong></p><p><img src="/2021/07/10/week-2-2/2-1.png" alt="1"></p><h3 id="程序注释和理解"><a href="#程序注释和理解" class="headerlink" title="程序注释和理解"></a>程序注释和理解</h3><p>该程序分为两个部分：</p><ul><li><p>一部分是<code>tensorRT</code>部分 就是<code>sources\objectDetector_Yolo</code>文件夹里的，编译后会生产动态库文件。也就是<code>libnvdsinfer_custom_impl_Yolo.so</code></p></li><li><p>另一部分是<code>deepstream</code>的文件，在<code>sources\apps\sample_apps\deepstream-app</code>文件夹里。</p></li></ul><p>首先说明下<code>tensorRT</code>几个文件的关系：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|-- kernels.cucuda核最底层的实现</span><br><span class="line">|-- nvdsinfer_yolo_engine.cpp根据网络类型创建引擎,生成tensorrt engine</span><br><span class="line">|-- nvdsparsebbox_Yolo.cppyolo目标检测结果的输出,推理后的后处理部分</span><br><span class="line">|-- trt_utils.cpp建立tensorRT网络的部分</span><br><span class="line">|-- trt_utils.h</span><br><span class="line">|-- yolo.cpp创建引擎、创建网络等的具体实现</span><br><span class="line">|-- yolo.h</span><br><span class="line">|-- yoloPlugins.cpp模型搭建的一些组件以及相应的实现</span><br><span class="line">|-- yoloPlugins.h</span><br></pre></td></tr></table></figure><p><img src="/2021/07/10/week-2-2/2-2.png" alt="1"></p><p>其中yolo.cpp实现了网络层的搭建，是核心代码部分,下面代码实现了卷积层的搭建：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果是卷积层</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m_ConfigBlocks.at(i).at(<span class="string">&quot;type&quot;</span>) == <span class="string">&quot;convolutional&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//获取tensor的大小</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> inputVol = dimsToString(previous-&gt;getDimensions());</span><br><span class="line">    nvinfer1::ILayer* out;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> layerType;<span class="comment">//保存网络类型</span></span><br><span class="line">    <span class="comment">// check if batch_norm enabled</span></span><br><span class="line">    <span class="keyword">if</span> (m_ConfigBlocks.at(i).find(<span class="string">&quot;batch_normalize&quot;</span>) !=</span><br><span class="line">    m_ConfigBlocks.at(i).end()) &#123;</span><br><span class="line">    <span class="comment">//有BN的卷积层</span></span><br><span class="line">    out = netAddConvBNLeaky(i, m_ConfigBlocks.at(i), weights,</span><br><span class="line">    m_TrtWeights, weightPtr, channels, previous, &amp;network);</span><br><span class="line">    layerType = <span class="string">&quot;conv-bn-leaky&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    out = netAddConvLinear(i, m_ConfigBlocks.at(i), weights,</span><br><span class="line">    m_TrtWeights, weightPtr, channels, previous, &amp;network);</span><br><span class="line">    layerType = <span class="string">&quot;conv-linear&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    previous = out-&gt;getOutput(<span class="number">0</span>);<span class="comment">//获取该层的输出</span></span><br><span class="line">    assert(previous != <span class="literal">nullptr</span>);</span><br><span class="line">    channels = getNumChannels(previous);</span><br><span class="line">    <span class="comment">//获取tensor的大小</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> outputVol = dimsToString(previous-&gt;getDimensions());</span><br><span class="line">    <span class="comment">//保存相应的层输出</span></span><br><span class="line">    tensorOutputs.push_back(out-&gt;getOutput(<span class="number">0</span>));</span><br><span class="line">    <span class="comment">//打印参数</span></span><br><span class="line">    printLayerInfo(layerIndex, layerType, inputVol, outputVol, <span class="built_in">std</span>::to_string(weightPtr));</span><br></pre></td></tr></table></figure><p>下面说明一下deepstream部分代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|-- deepstream-app</span><br><span class="line">|   |-- Makefile</span><br><span class="line">|   |-- README</span><br><span class="line">|   |-- deepstream_app.cpipeline的一些操作在这里</span><br><span class="line">|   |-- deepstream_app.h</span><br><span class="line">|   |-- deepstream_app_config_parser.c 配置文件的解析</span><br><span class="line">|   |-- deepstream_app_main.c deepstream主函数</span><br><span class="line"></span><br><span class="line">deepstream会调用动态库文件libnvdsinfer_custom_impl_Yolo.so实现网络层的搭建等功能</span><br></pre></td></tr></table></figure><p>再来看下deepstream_app_main.c主函数部分的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  GOptionContext *ctx = <span class="literal">NULL</span>;</span><br><span class="line">  GOptionGroup *group = <span class="literal">NULL</span>;</span><br><span class="line">  GError *error = <span class="literal">NULL</span>;</span><br><span class="line">  guint i;</span><br><span class="line">  ctx = g_option_context_new (<span class="string">&quot;Nvidia DeepStream Demo&quot;</span>);</span><br><span class="line">  group = g_option_group_new (<span class="string">&quot;abc&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">  g_option_group_add_entries (group, entries);  <span class="comment">//把entries添加到group</span></span><br><span class="line">  g_option_context_set_main_group (ctx, group); <span class="comment">//group添加到ctx</span></span><br><span class="line">  g_option_context_add_group (ctx, gst_init_get_option_group ());</span><br><span class="line">  GST_DEBUG_CATEGORY_INIT (NVDS_APP, <span class="string">&quot;NVDS_APP&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>);   </span><br><span class="line">  <span class="comment">// 解析命令行参数，识别已添加到上下文的选项</span></span><br><span class="line">  <span class="keyword">if</span> (!g_option_context_parse (ctx, &amp;argc, &amp;argv, &amp;error)) &#123;</span><br><span class="line">    NVGSTDS_ERR_MSG_V (<span class="string">&quot;%s&quot;</span>, error-&gt;message);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (print_version) &#123;</span><br><span class="line">    g_print (<span class="string">&quot;deepstream-app version %d.%d.%d\n&quot;</span>,</span><br><span class="line">        NVDS_APP_VERSION_MAJOR, NVDS_APP_VERSION_MINOR, NVDS_APP_VERSION_MICRO);</span><br><span class="line">    nvds_version_print ();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (print_dependencies_version) &#123;</span><br><span class="line">    g_print (<span class="string">&quot;deepstream-app version %d.%d.%d\n&quot;</span>,</span><br><span class="line">        NVDS_APP_VERSION_MAJOR, NVDS_APP_VERSION_MINOR, NVDS_APP_VERSION_MICRO);</span><br><span class="line">    nvds_version_print ();</span><br><span class="line">    nvds_dependencies_version_print ();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (cfg_files) &#123;<span class="comment">//一般执行这项</span></span><br><span class="line">    num_instances = g_strv_length (cfg_files);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (input_files) &#123;</span><br><span class="line">    num_input_files = g_strv_length (input_files);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!cfg_files || num_instances == <span class="number">0</span>) &#123;</span><br><span class="line">    NVGSTDS_ERR_MSG_V (<span class="string">&quot;Specify config file with -c option&quot;</span>);</span><br><span class="line">    return_value = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> done;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_instances; i++) &#123;</span><br><span class="line">    appCtx[i] = g_malloc0 (<span class="keyword">sizeof</span> (AppCtx));</span><br><span class="line">    appCtx[i]-&gt;person_class_id = <span class="number">-1</span>;</span><br><span class="line">    appCtx[i]-&gt;car_class_id = <span class="number">-1</span>;</span><br><span class="line">    appCtx[i]-&gt;index = i;</span><br><span class="line">    appCtx[i]-&gt;active_source_index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (show_bbox_text) &#123;</span><br><span class="line">      appCtx[i]-&gt;show_bbox_text = TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (input_files &amp;&amp; input_files[i]) &#123;</span><br><span class="line">      appCtx[i]-&gt;config.multi_source_config[<span class="number">0</span>].uri =</span><br><span class="line">          g_strdup_printf (<span class="string">&quot;file://%s&quot;</span>, input_files[i]);</span><br><span class="line">      g_free (input_files[i]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 解析配置文件内容，这是个重点函数</span></span><br><span class="line">    <span class="keyword">if</span> (!parse_config_file (&amp;appCtx[i]-&gt;config, cfg_files[i])) &#123;</span><br><span class="line">      NVGSTDS_ERR_MSG_V (<span class="string">&quot;Failed to parse config file &#x27;%s&#x27;&quot;</span>, cfg_files[i]);</span><br><span class="line">      appCtx[i]-&gt;return_value = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">goto</span> done;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 针对配置进行创建pipeline，这里是关键部分deepstream部分</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_instances; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!create_pipeline (appCtx[i], <span class="literal">NULL</span>,</span><br><span class="line">            all_bbox_generated, perf_cb, overlay_graphics)) &#123;</span><br><span class="line">      NVGSTDS_ERR_MSG_V (<span class="string">&quot;Failed to create pipeline&quot;</span>);</span><br><span class="line">      return_value = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">goto</span> done;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  main_loop = g_main_loop_new (<span class="literal">NULL</span>, FALSE);</span><br><span class="line">  _intr_setup ();</span><br><span class="line">  g_timeout_add (<span class="number">400</span>, check_for_interrupt, <span class="literal">NULL</span>);</span><br><span class="line">  g_mutex_init (&amp;disp_lock);</span><br><span class="line">  <span class="comment">// 这部分是显示相关的内容</span></span><br><span class="line">  display = XOpenDisplay (<span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_instances; i++) &#123;</span><br><span class="line">    guint j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (gst_element_set_state (appCtx[i]-&gt;pipeline.pipeline,</span><br><span class="line">            GST_STATE_PAUSED) == GST_STATE_CHANGE_FAILURE) &#123;</span><br><span class="line">      NVGSTDS_ERR_MSG_V (<span class="string">&quot;Failed to set pipeline to PAUSED&quot;</span>);</span><br><span class="line">      return_value = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">goto</span> done;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!appCtx[i]-&gt;config.tiled_display_config.enable)</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; appCtx[i]-&gt;config.num_sink_sub_bins; j++) &#123;</span><br><span class="line">      XTextProperty xproperty;</span><br><span class="line">      gchar *title;</span><br><span class="line">      guint width, height;</span><br><span class="line">      XSizeHints hints = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">      <span class="keyword">if</span> (!GST_IS_VIDEO_OVERLAY (appCtx[i]-&gt;pipeline.instance_bins[<span class="number">0</span>].</span><br><span class="line">              sink_bin.sub_bins[j].sink)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!display) &#123;</span><br><span class="line">        NVGSTDS_ERR_MSG_V (<span class="string">&quot;Could not open X Display&quot;</span>);</span><br><span class="line">        return_value = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">// 显示设置</span></span><br><span class="line">      <span class="keyword">if</span> (appCtx[i]-&gt;config.sink_bin_sub_bin_config[j].render_config.width)</span><br><span class="line">        width =</span><br><span class="line">            appCtx[i]-&gt;config.sink_bin_sub_bin_config[j].render_config.width;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        width = appCtx[i]-&gt;config.tiled_display_config.width;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (appCtx[i]-&gt;config.sink_bin_sub_bin_config[j].render_config.height)</span><br><span class="line">        height =</span><br><span class="line">            appCtx[i]-&gt;config.sink_bin_sub_bin_config[j].render_config.height;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        height = appCtx[i]-&gt;config.tiled_display_config.height;</span><br><span class="line">      width = (width) ? width : DEFAULT_X_WINDOW_WIDTH;</span><br><span class="line">      height = (height) ? height : DEFAULT_X_WINDOW_HEIGHT;</span><br><span class="line">      hints.flags = PPosition | PSize;</span><br><span class="line">      hints.x = appCtx[i]-&gt;config.sink_bin_sub_bin_config[j].render_config.offset_x;</span><br><span class="line">      hints.y = appCtx[i]-&gt;config.sink_bin_sub_bin_config[j].render_config.offset_y;</span><br><span class="line">      hints.width = width;</span><br><span class="line">      hints.height = height;</span><br><span class="line">      windows[i] =</span><br><span class="line">          XCreateSimpleWindow (display, RootWindow (display,</span><br><span class="line">              DefaultScreen (display)), hints.x, hints.y, width, height, <span class="number">2</span>,</span><br><span class="line">              <span class="number">0x00000000</span>, <span class="number">0x00000000</span>);</span><br><span class="line">      XSetNormalHints(display, windows[i], &amp;hints);</span><br><span class="line">      <span class="keyword">if</span> (num_instances &gt; <span class="number">1</span>)</span><br><span class="line">        title = g_strdup_printf (APP_TITLE <span class="string">&quot;-%d&quot;</span>, i);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        title = g_strdup (APP_TITLE);</span><br><span class="line">      <span class="keyword">if</span> (XStringListToTextProperty ((<span class="keyword">char</span> **) &amp;title, <span class="number">1</span>, &amp;xproperty) != <span class="number">0</span>) &#123;</span><br><span class="line">        XSetWMName (display, windows[i], &amp;xproperty);</span><br><span class="line">        XFree (xproperty.value);</span><br><span class="line">      &#125;</span><br><span class="line">      XSetWindowAttributes attr = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">      <span class="keyword">if</span> ((appCtx[i]-&gt;config.tiled_display_config.enable &amp;&amp;</span><br><span class="line">              appCtx[i]-&gt;config.tiled_display_config.rows *</span><br><span class="line">              appCtx[i]-&gt;config.tiled_display_config.columns == <span class="number">1</span>) ||</span><br><span class="line">          (appCtx[i]-&gt;config.tiled_display_config.enable == <span class="number">0</span> &amp;&amp;</span><br><span class="line">              appCtx[i]-&gt;config.num_source_sub_bins == <span class="number">1</span>)) &#123;</span><br><span class="line">        attr.event_mask = KeyPress;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        attr.event_mask = ButtonPress | KeyRelease;</span><br><span class="line">      &#125;</span><br><span class="line">      XChangeWindowAttributes (display, windows[i], CWEventMask, &amp;attr);</span><br><span class="line"></span><br><span class="line">      Atom wmDeleteMessage = XInternAtom (display, <span class="string">&quot;WM_DELETE_WINDOW&quot;</span>, False);</span><br><span class="line">      <span class="keyword">if</span> (wmDeleteMessage != None) &#123;</span><br><span class="line">        XSetWMProtocols (display, windows[i], &amp;wmDeleteMessage, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      XMapRaised (display, windows[i]);</span><br><span class="line">      XSync (display, <span class="number">1</span>);       <span class="comment">//discard the events for now</span></span><br><span class="line">      gst_video_overlay_set_window_handle (GST_VIDEO_OVERLAY (appCtx</span><br><span class="line">              [i]-&gt;pipeline.instance_bins[<span class="number">0</span>].sink_bin.sub_bins[j].sink),</span><br><span class="line">          (gulong) windows[i]);</span><br><span class="line">      gst_video_overlay_expose (GST_VIDEO_OVERLAY (appCtx[i]-&gt;</span><br><span class="line">              pipeline.instance_bins[<span class="number">0</span>].sink_bin.sub_bins[j].sink));</span><br><span class="line">      <span class="keyword">if</span> (!x_event_thread)</span><br><span class="line">        x_event_thread = g_thread_new (<span class="string">&quot;nvds-window-event-thread&quot;</span>,</span><br><span class="line">            nvds_x_event_thread, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* Dont try to set playing state if error is observed */</span> </span><br><span class="line">  <span class="comment">// 发生错误的处理</span></span><br><span class="line">  <span class="keyword">if</span> (return_value != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_instances; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (gst_element_set_state (appCtx[i]-&gt;pipeline.pipeline,</span><br><span class="line">              GST_STATE_PLAYING) == GST_STATE_CHANGE_FAILURE) &#123;</span><br><span class="line"></span><br><span class="line">        g_print (<span class="string">&quot;\ncan&#x27;t set pipeline to playing state.\n&quot;</span>);</span><br><span class="line">        return_value = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  print_runtime_commands ();</span><br><span class="line">  changemode (<span class="number">1</span>);</span><br><span class="line">  g_timeout_add (<span class="number">40</span>, event_thread_func, <span class="literal">NULL</span>);</span><br><span class="line">  g_main_loop_run (main_loop);</span><br><span class="line">  changemode (<span class="number">0</span>);</span><br><span class="line">done:</span><br><span class="line">  g_print (<span class="string">&quot;Quitting\n&quot;</span>);</span><br><span class="line">  <span class="comment">// 下面是释放资源</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_instances; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (appCtx[i]-&gt;return_value == <span class="number">-1</span>)</span><br><span class="line">      return_value = <span class="number">-1</span>;</span><br><span class="line">    destroy_pipeline (appCtx[i]);</span><br><span class="line"></span><br><span class="line">    g_mutex_lock (&amp;disp_lock);</span><br><span class="line">    <span class="keyword">if</span> (windows[i])</span><br><span class="line">      XDestroyWindow (display, windows[i]);</span><br><span class="line">    windows[i] = <span class="number">0</span>;</span><br><span class="line">    g_mutex_unlock (&amp;disp_lock);</span><br><span class="line">    g_free (appCtx[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  g_mutex_lock (&amp;disp_lock);</span><br><span class="line">  <span class="keyword">if</span> (display)</span><br><span class="line">    XCloseDisplay (display);</span><br><span class="line">  display = <span class="literal">NULL</span>;</span><br><span class="line">  g_mutex_unlock (&amp;disp_lock);</span><br><span class="line">  g_mutex_clear (&amp;disp_lock);</span><br><span class="line">  <span class="keyword">if</span> (main_loop) &#123;</span><br><span class="line">    g_main_loop_unref (main_loop);<span class="comment">//执行循环推理</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ctx) &#123;</span><br><span class="line">    g_option_context_free (ctx);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (return_value == <span class="number">0</span>) &#123;</span><br><span class="line">    g_print (<span class="string">&quot;App run successful\n&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    g_print (<span class="string">&quot;App run failed\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  gst_deinit ();</span><br><span class="line">  <span class="keyword">return</span> return_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是<code>deepstream_app_config_parser.c</code>解析配置文件的代码，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gboolean</span></span><br><span class="line"><span class="function"><span class="title">parse_config_file</span> <span class="params">(NvDsConfig *config, gchar *cfg_file_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  GKeyFile *cfg_file = g_key_file_new ();</span><br><span class="line">  GError *error = <span class="literal">NULL</span>;</span><br><span class="line">  gboolean ret = FALSE;</span><br><span class="line">  gchar **groups = <span class="literal">NULL</span>;</span><br><span class="line">  gchar **group;</span><br><span class="line">  guint i, j;</span><br><span class="line"></span><br><span class="line">  config-&gt;source_list_enabled = FALSE;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!APP_CFG_PARSER_CAT) &#123;</span><br><span class="line">    GST_DEBUG_CATEGORY_INIT (APP_CFG_PARSER_CAT, <span class="string">&quot;NVDS_CFG_PARSER&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!g_key_file_load_from_file (cfg_file, cfg_file_path, G_KEY_FILE_NONE,</span><br><span class="line">          &amp;error)) &#123;</span><br><span class="line">    GST_CAT_ERROR (APP_CFG_PARSER_CAT, <span class="string">&quot;Failed to load uri file: %s&quot;</span>,</span><br><span class="line">        error-&gt;message);</span><br><span class="line">    <span class="keyword">goto</span> done;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (g_key_file_has_group (cfg_file, CONFIG_GROUP_SOURCE_LIST)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!parse_source_list (config, cfg_file, cfg_file_path)) &#123;</span><br><span class="line">      GST_CAT_ERROR (APP_CFG_PARSER_CAT, <span class="string">&quot;Failed to parse &#x27;%s&#x27; group&quot;</span>,</span><br><span class="line">          CONFIG_GROUP_SOURCE_LIST);</span><br><span class="line">      <span class="keyword">goto</span> done;</span><br><span class="line">    &#125;</span><br><span class="line">    config-&gt;num_source_sub_bins = config-&gt;total_num_sources;</span><br><span class="line">    config-&gt;source_list_enabled = TRUE;</span><br><span class="line">    <span class="keyword">if</span> (!g_key_file_has_group (cfg_file, CONFIG_GROUP_SOURCE_ALL)) &#123;</span><br><span class="line">      NVGSTDS_ERR_MSG_V (<span class="string">&quot;[source-attr-all] group not present.&quot;</span>);</span><br><span class="line">      ret = FALSE;</span><br><span class="line">      <span class="keyword">goto</span> done;</span><br><span class="line">    &#125;</span><br><span class="line">    g_key_file_remove_group (cfg_file, CONFIG_GROUP_SOURCE_LIST, &amp;error);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (g_key_file_has_group (cfg_file, CONFIG_GROUP_SOURCE_ALL)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!parse_source (&amp;global_source_config,</span><br><span class="line">            cfg_file, CONFIG_GROUP_SOURCE_ALL, cfg_file_path)) &#123;</span><br><span class="line">      GST_CAT_ERROR (APP_CFG_PARSER_CAT, <span class="string">&quot;Failed to parse &#x27;%s&#x27; group&quot;</span>,</span><br><span class="line">          CONFIG_GROUP_SOURCE_LIST);</span><br><span class="line">      <span class="keyword">goto</span> done;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!set_source_all_configs (config, cfg_file_path)) &#123;</span><br><span class="line">      ret = FALSE;</span><br><span class="line">      <span class="keyword">goto</span> done;</span><br><span class="line">    &#125;</span><br><span class="line">    g_key_file_remove_group (cfg_file, CONFIG_GROUP_SOURCE_ALL, &amp;error);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 信息存储在里cfg_file里面</span></span><br><span class="line">  groups = g_key_file_get_groups (cfg_file, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="comment">//这里对应的是8项  </span></span><br><span class="line">  <span class="comment">//group[0]=application</span></span><br><span class="line">  <span class="comment">//group[1]=tiled-display</span></span><br><span class="line">  <span class="comment">//group[2]=source0</span></span><br><span class="line">  <span class="comment">//group[3]=sink0</span></span><br><span class="line">  <span class="comment">//group[4]=osd</span></span><br><span class="line">  <span class="comment">//group[5]=streammux</span></span><br><span class="line">  <span class="comment">//group[6]=primary-gie</span></span><br><span class="line">  <span class="comment">//group[7]=tracker</span></span><br><span class="line">  <span class="comment">//group[8]=tests</span></span><br><span class="line">  <span class="keyword">for</span> (group = groups; *group; group++) &#123;</span><br><span class="line">    gboolean parse_err = FALSE;</span><br><span class="line">    GST_CAT_DEBUG (APP_CFG_PARSER_CAT, <span class="string">&quot;Parsing group: %s&quot;</span>, *group);</span><br><span class="line">    <span class="comment">// application </span></span><br><span class="line">    <span class="keyword">if</span> (!g_strcmp0 (*group, CONFIG_GROUP_APP)) &#123;</span><br><span class="line">      parse_err = !parse_app (config, cfg_file, cfg_file_path);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// source0  </span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strncmp</span> (*group, CONFIG_GROUP_SOURCE,</span><br><span class="line">            <span class="keyword">sizeof</span> (CONFIG_GROUP_SOURCE) - <span class="number">1</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (config-&gt;num_source_sub_bins == MAX_SOURCE_BINS) &#123;</span><br><span class="line">        NVGSTDS_ERR_MSG_V (<span class="string">&quot;App supports max %d sources&quot;</span>, MAX_SOURCE_BINS);</span><br><span class="line">        ret = FALSE;</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">      &#125;</span><br><span class="line">      gchar *source_id_start_ptr = *group + <span class="built_in">strlen</span> (CONFIG_GROUP_SOURCE);</span><br><span class="line">      gchar *source_id_end_ptr = <span class="literal">NULL</span>;</span><br><span class="line">      guint index =</span><br><span class="line">          g_ascii_strtoull (source_id_start_ptr, &amp;source_id_end_ptr, <span class="number">10</span>);</span><br><span class="line">      <span class="keyword">if</span> (source_id_start_ptr == source_id_end_ptr</span><br><span class="line">          || *source_id_end_ptr != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        NVGSTDS_ERR_MSG_V</span><br><span class="line">            (<span class="string">&quot;Source group \&quot;[%s]\&quot; is not in the form \&quot;[source&lt;%%d&gt;]\&quot;&quot;</span>,</span><br><span class="line">            *group);</span><br><span class="line">        ret = FALSE;</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">      &#125;</span><br><span class="line">      guint source_id = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (config-&gt;source_list_enabled) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= config-&gt;total_num_sources) &#123;</span><br><span class="line">          NVGSTDS_ERR_MSG_V</span><br><span class="line">              (<span class="string">&quot;Invalid source group index %d, index cannot exceed %d&quot;</span>, index,</span><br><span class="line">              config-&gt;total_num_sources);</span><br><span class="line">          ret = FALSE;</span><br><span class="line">          <span class="keyword">goto</span> done;</span><br><span class="line">        &#125;</span><br><span class="line">        source_id = index;</span><br><span class="line">        NVGSTDS_INFO_MSG_V (<span class="string">&quot;Some parameters to be overwritten for group [%s]&quot;</span>,</span><br><span class="line">            *group);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        source_id = config-&gt;num_source_sub_bins;</span><br><span class="line">      &#125;</span><br><span class="line">      parse_err = !parse_source (&amp;config-&gt;multi_source_config[source_id],</span><br><span class="line">          cfg_file, *group, cfg_file_path);</span><br><span class="line">      <span class="keyword">if</span> (config-&gt;source_list_enabled</span><br><span class="line">          &amp;&amp; config-&gt;multi_source_config[source_id].type ==</span><br><span class="line">          NV_DS_SOURCE_URI_MULTIPLE) &#123;</span><br><span class="line">        NVGSTDS_ERR_MSG_V</span><br><span class="line">            (<span class="string">&quot;MultiURI support not available if [source-list] is provided&quot;</span>);</span><br><span class="line">        ret = FALSE;</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (config-&gt;multi_source_config[source_id].enable</span><br><span class="line">          &amp;&amp; !config-&gt;source_list_enabled) &#123;</span><br><span class="line">        config-&gt;num_source_sub_bins++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// streammux</span></span><br><span class="line">    <span class="keyword">if</span> (!g_strcmp0 (*group, CONFIG_GROUP_STREAMMUX)) &#123;</span><br><span class="line">      <span class="comment">// 存储到config-&gt;streammux_config中</span></span><br><span class="line">      parse_err = !parse_streammux (&amp;config-&gt;streammux_config, cfg_file, cfg_file_path);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// osd</span></span><br><span class="line">    <span class="keyword">if</span> (!g_strcmp0 (*group, CONFIG_GROUP_OSD)) &#123;</span><br><span class="line">      parse_err = !parse_osd (&amp;config-&gt;osd_config, cfg_file);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// primary_gie</span></span><br><span class="line">    <span class="keyword">if</span> (!g_strcmp0 (*group, CONFIG_GROUP_PRIMARY_GIE)) &#123;</span><br><span class="line">      parse_err =</span><br><span class="line">          !parse_gie (&amp;config-&gt;primary_gie_config, cfg_file,</span><br><span class="line">          CONFIG_GROUP_PRIMARY_GIE, cfg_file_path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!g_strcmp0 (*group, CONFIG_GROUP_TRACKER)) &#123;</span><br><span class="line">      parse_err = !parse_tracker (&amp;config-&gt;tracker_config, cfg_file, cfg_file_path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strncmp</span> (*group, CONFIG_GROUP_SECONDARY_GIE,</span><br><span class="line">                  <span class="keyword">sizeof</span> (CONFIG_GROUP_SECONDARY_GIE) - <span class="number">1</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (config-&gt;num_secondary_gie_sub_bins == MAX_SECONDARY_GIE_BINS) &#123;</span><br><span class="line">        NVGSTDS_ERR_MSG_V (<span class="string">&quot;App supports max %d secondary GIEs&quot;</span>, MAX_SECONDARY_GIE_BINS);</span><br><span class="line">        ret = FALSE;</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">      &#125;</span><br><span class="line">      parse_err =</span><br><span class="line">          !parse_gie (&amp;config-&gt;secondary_gie_sub_bin_config[config-&gt;</span><br><span class="line">                                  num_secondary_gie_sub_bins],</span><br><span class="line">                                  cfg_file, *group, cfg_file_path);</span><br><span class="line">      <span class="keyword">if</span> (config-&gt;secondary_gie_sub_bin_config[config-&gt;num_secondary_gie_sub_bins].enable)&#123;</span><br><span class="line">        config-&gt;num_secondary_gie_sub_bins++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strncmp</span> (*group, CONFIG_GROUP_SINK, <span class="keyword">sizeof</span> (CONFIG_GROUP_SINK) - <span class="number">1</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (config-&gt;num_sink_sub_bins == MAX_SINK_BINS) &#123;</span><br><span class="line">        NVGSTDS_ERR_MSG_V (<span class="string">&quot;App supports max %d sinks&quot;</span>, MAX_SINK_BINS);</span><br><span class="line">        ret = FALSE;</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">      &#125;</span><br><span class="line">      parse_err =</span><br><span class="line">          !parse_sink (&amp;config-&gt;</span><br><span class="line">          sink_bin_sub_bin_config[config-&gt;num_sink_sub_bins], cfg_file, *group,</span><br><span class="line">          cfg_file_path);</span><br><span class="line">      <span class="keyword">if</span> (config-&gt;</span><br><span class="line">          sink_bin_sub_bin_config[config-&gt;num_sink_sub_bins].enable)&#123;</span><br><span class="line">        config-&gt;num_sink_sub_bins++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strncmp</span> (*group, CONFIG_GROUP_MSG_CONSUMER,</span><br><span class="line">        <span class="keyword">sizeof</span> (CONFIG_GROUP_MSG_CONSUMER) - <span class="number">1</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (config-&gt;num_message_consumers == MAX_MESSAGE_CONSUMERS) &#123;</span><br><span class="line">        NVGSTDS_ERR_MSG_V (<span class="string">&quot;App supports max %d consumers&quot;</span>, MAX_MESSAGE_CONSUMERS);</span><br><span class="line">        ret = FALSE;</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">      &#125;</span><br><span class="line">      parse_err = !parse_msgconsumer (</span><br><span class="line">                    &amp;config-&gt;message_consumer_config[config-&gt;num_message_consumers],</span><br><span class="line">                    cfg_file, *group, cfg_file_path);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (config-&gt;message_consumer_config[config-&gt;num_message_consumers].enable) &#123;</span><br><span class="line">        config-&gt;num_message_consumers++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// tiled-display</span></span><br><span class="line">    <span class="keyword">if</span> (!g_strcmp0 (*group, CONFIG_GROUP_TILED_DISPLAY)) &#123;</span><br><span class="line">      parse_err = !parse_tiled_display (&amp;config-&gt;tiled_display_config, cfg_file);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!g_strcmp0 (*group, CONFIG_GROUP_IMG_SAVE)) &#123;</span><br><span class="line">      parse_err = !parse_image_save (&amp;config-&gt;image_save_config , cfg_file, *group, cfg_file_path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!g_strcmp0 (*group, CONFIG_GROUP_DSANALYTICS)) &#123;</span><br><span class="line">      parse_err = !parse_dsanalytics (&amp;config-&gt;dsanalytics_config, cfg_file, cfg_file_path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!g_strcmp0 (*group, CONFIG_GROUP_DSEXAMPLE)) &#123;</span><br><span class="line">      parse_err = !parse_dsexample (&amp;config-&gt;dsexample_config, cfg_file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!g_strcmp0 (*group, CONFIG_GROUP_MSG_CONVERTER)) &#123;</span><br><span class="line">      parse_err = !parse_msgconv (&amp;config-&gt;msg_conv_config, cfg_file, *group, cfg_file_path);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// tests</span></span><br><span class="line">    <span class="keyword">if</span> (!g_strcmp0 (*group, CONFIG_GROUP_TESTS)) &#123;</span><br><span class="line">      parse_err = !parse_tests (config, cfg_file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parse_err) &#123;</span><br><span class="line">      GST_CAT_ERROR (APP_CFG_PARSER_CAT, <span class="string">&quot;Failed to parse &#x27;%s&#x27; group&quot;</span>, *group);</span><br><span class="line">      <span class="keyword">goto</span> done;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 二级网络处理</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; config-&gt;num_secondary_gie_sub_bins; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (config-&gt;secondary_gie_sub_bin_config[i].unique_id ==</span><br><span class="line">        config-&gt;primary_gie_config.unique_id) &#123;</span><br><span class="line">      NVGSTDS_ERR_MSG_V (<span class="string">&quot;Non unique gie ids found&quot;</span>);</span><br><span class="line">      ret = FALSE;</span><br><span class="line">      <span class="keyword">goto</span> done;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; config-&gt;num_secondary_gie_sub_bins; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; config-&gt;num_secondary_gie_sub_bins; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (config-&gt;secondary_gie_sub_bin_config[i].unique_id ==</span><br><span class="line">          config-&gt;secondary_gie_sub_bin_config[j].unique_id) &#123;</span><br><span class="line">        NVGSTDS_ERR_MSG_V (<span class="string">&quot;Non unique gie id %d found&quot;</span>,</span><br><span class="line">                            config-&gt;secondary_gie_sub_bin_config[i].unique_id);</span><br><span class="line">        ret = FALSE;</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 多输入源处理</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; config-&gt;num_source_sub_bins; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (config-&gt;multi_source_config[i].type == NV_DS_SOURCE_URI_MULTIPLE) &#123;</span><br><span class="line">      <span class="keyword">if</span> (config-&gt;multi_source_config[i].num_sources &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        config-&gt;multi_source_config[i].num_sources = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; config-&gt;multi_source_config[i].num_sources; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (config-&gt;num_source_sub_bins == MAX_SOURCE_BINS) &#123;</span><br><span class="line">          NVGSTDS_ERR_MSG_V (<span class="string">&quot;App supports max %d sources&quot;</span>, MAX_SOURCE_BINS);</span><br><span class="line">          ret = FALSE;</span><br><span class="line">          <span class="keyword">goto</span> done;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span> (&amp;config-&gt;multi_source_config[config-&gt;num_source_sub_bins],</span><br><span class="line">            &amp;config-&gt;multi_source_config[i],</span><br><span class="line">            <span class="keyword">sizeof</span> (config-&gt;multi_source_config[i]));</span><br><span class="line">        config-&gt;multi_source_config[config-&gt;num_source_sub_bins].type =</span><br><span class="line">            NV_DS_SOURCE_URI;</span><br><span class="line">        config-&gt;multi_source_config[config-&gt;num_source_sub_bins].uri =</span><br><span class="line">            g_strdup_printf (config-&gt;multi_source_config[config-&gt;</span><br><span class="line">                num_source_sub_bins].uri, j);</span><br><span class="line">        config-&gt;num_source_sub_bins++;</span><br><span class="line">      &#125;</span><br><span class="line">      config-&gt;multi_source_config[i].type = NV_DS_SOURCE_URI;</span><br><span class="line">      config-&gt;multi_source_config[i].uri =</span><br><span class="line">          g_strdup_printf (config-&gt;multi_source_config[i].uri, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ret = TRUE;</span><br><span class="line"></span><br><span class="line">done:</span><br><span class="line">  <span class="keyword">if</span> (cfg_file) &#123;</span><br><span class="line">    g_key_file_free (cfg_file);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (groups) &#123;</span><br><span class="line">    g_strfreev (groups);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    g_error_free (error);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">    NVGSTDS_ERR_MSG_V (<span class="string">&quot;%s failed&quot;</span>, __func__);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是建立<code>pipeline</code>的代码，建立<code>pipeline</code>是属于<code>deepstream</code>的部分，里面包含了<code>tensorRT</code>的调用。配置文件当中的<code>[primary-gie]</code>是对推理引擎的相关配置。修改配置文件可以对模型参数进行设置。</p><h2 id="使用yolov3检测安全帽👷"><a href="#使用yolov3检测安全帽👷" class="headerlink" title="使用yolov3检测安全帽👷"></a>使用yolov3检测安全帽👷</h2><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><p>模型配置文件：<code>yolov3_half_helmet.cfg</code><br>模型权重文件：<code>yolov3_half_helmet.weights</code><br>模型类别：3  ， 0-正常头肩，1-保安头肩，2-安全帽头肩 见<code>helmet.names</code><br>测试视频文件：<code>test_helmet_1.mp4</code>    <code> test_personcount.mp4</code></p><h3 id="检测任务"><a href="#检测任务" class="headerlink" title="检测任务"></a>检测任务</h3><p>①使用<code>deepstream</code>构建一个<code>pipeline</code>，检测<code>test_helmet_1.mp4</code>，输出画面中正常头肩画红框，保安头肩画蓝框，安全帽头肩画绿框<br>②测试安全帽检测 前处理，推理，后处理所用的时间<br>③使用<code>deepstream</code>构建多线程<code>pipeline</code>，使用安全帽检测模型同时检测2个视频文件</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>对于自定义数据的检测，需根据自己检测的类别修改如下文件</p><p>修改<code>nvdsinfer_custom_impl_Yolo/nvdsparsebbox_Yolo.cpp</code>文件中检测类别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 默认检测coco数据集80个类别，修改为你自己检测的类别</span><br><span class="line">static const int NUM_CLASSES_YOLO = 3;</span><br></pre></td></tr></table></figure><p>注意，修改完需要重新编译和运行生成链接的<code>.so</code>文件</p><p>修改<code>config_infer_primary_yoloV3.txt</code>文件，修改<code>cfg</code>和<code>weights</code>等文件，根据自己检测的类别设置<code>num-detected-classes</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[property]</span><br><span class="line">gpu-id=0</span><br><span class="line">net-scale-factor=0.0039215697906911373</span><br><span class="line">#0=RGB, 1=BGR</span><br><span class="line">model-color-format=0</span><br><span class="line">#修改cfg文件</span><br><span class="line">custom-network-config=yolov3_half_helmet_20200607.cfg</span><br><span class="line">#修改weights文件</span><br><span class="line">model-file=yolov3_half_helmet_20200607.weights</span><br><span class="line">#model-engine-file=yolov3_b1_gpu0_int8.engine</span><br><span class="line">#修改label文件</span><br><span class="line">labelfile-path=helmet_names.txt</span><br><span class="line">int8-calib-file=yolov3-calibration.table.trt7.0</span><br><span class="line">## 0=FP32, 1=INT8, 2=FP16 mode</span><br><span class="line">network-mode=1</span><br><span class="line">#模型类别:3 0-正常头肩，1-保安头肩，2-安全帽头肩</span><br><span class="line">num-detected-classes=3</span><br><span class="line">gie-unique-id=1</span><br><span class="line">network-type=0</span><br><span class="line">is-classifier=0</span><br><span class="line">## 0=Group Rectangles, 1=DBSCAN, 2=NMS, 3= DBSCAN+NMS Hybrid, 4 = None(No clustering)</span><br><span class="line">cluster-mode=2</span><br><span class="line">maintain-aspect-ratio=1</span><br><span class="line">parse-bbox-func-name=NvDsInferParseCustomYoloV3</span><br><span class="line"># 编译的动态库路径</span><br><span class="line">custom-lib-path=nvdsinfer_custom_impl_Yolo/libnvdsinfer_custom_impl_Yolo.so</span><br><span class="line">engine-create-func-name=NvDsInferYoloCudaEngineGet</span><br><span class="line">#scaling-filter=0</span><br><span class="line">#scaling-compute-hw=0</span><br><span class="line"></span><br><span class="line">[class-attrs-all]</span><br><span class="line">nms-iou-threshold=0.3# NMS的阈值</span><br><span class="line">#threshold=0.7</span><br><span class="line">pre-cluster-threshold=0.7   # 检测框的过滤阈值</span><br></pre></td></tr></table></figure><p>修改<code>deepstream_app_config_yoloV3.txt</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">[application]</span><br><span class="line">enable-perf-measurement=1</span><br><span class="line">perf-measurement-interval-sec=5</span><br><span class="line">#gie-kitti-output-dir=streamscl</span><br><span class="line"></span><br><span class="line">[tiled-display]</span><br><span class="line">enable=1</span><br><span class="line">rows=1</span><br><span class="line">columns=1</span><br><span class="line">width=1280</span><br><span class="line">height=720</span><br><span class="line">gpu-id=0</span><br><span class="line">#(0): nvbuf-mem-default - Default memory allocated, specific to particular platform</span><br><span class="line">#(1): nvbuf-mem-cuda-pinned - Allocate Pinned/Host cuda memory, applicable for Tesla</span><br><span class="line">#(2): nvbuf-mem-cuda-device - Allocate Device cuda memory, applicable for Tesla</span><br><span class="line">#(3): nvbuf-mem-cuda-unified - Allocate Unified cuda memory, applicable for Tesla</span><br><span class="line">#(4): nvbuf-mem-surface-array - Allocate Surface Array memory, applicable for Jetson</span><br><span class="line">nvbuf-memory-type=0</span><br><span class="line"></span><br><span class="line">[source0]</span><br><span class="line">enable=1</span><br><span class="line">#Type - 1=CameraV4L2 2=URI 3=MultiURI</span><br><span class="line">type=3</span><br><span class="line"># 修改文件位置</span><br><span class="line">uri=file://../../samples/streams/test_helmet_1.mp4</span><br><span class="line">num-sources=1</span><br><span class="line">gpu-id=0</span><br><span class="line"># (0): memtype_device   - Memory type Device</span><br><span class="line"># (1): memtype_pinned   - Memory type Host Pinned</span><br><span class="line"># (2): memtype_unified  - Memory type Unified</span><br><span class="line">cudadec-memtype=0</span><br><span class="line"></span><br><span class="line">[sink0]</span><br><span class="line">enable=1</span><br><span class="line">#Type - 1=FakeSink 2=EglSink 3=File</span><br><span class="line">type=2</span><br><span class="line">sync=0</span><br><span class="line">source-id=0</span><br><span class="line">gpu-id=0</span><br><span class="line">nvbuf-memory-type=0</span><br><span class="line"></span><br><span class="line">[osd]</span><br><span class="line">enable=1</span><br><span class="line">gpu-id=0</span><br><span class="line">border-width=1</span><br><span class="line">text-size=15</span><br><span class="line">text-color=1;1;1;1;</span><br><span class="line">text-bg-color=0.3;0.3;0.3;1</span><br><span class="line">font=Serif</span><br><span class="line">show-clock=0</span><br><span class="line">clock-x-offset=800</span><br><span class="line">clock-y-offset=820</span><br><span class="line">clock-text-size=12</span><br><span class="line">clock-color=1;0;0;0</span><br><span class="line">nvbuf-memory-type=0</span><br><span class="line"></span><br><span class="line">[streammux]</span><br><span class="line">gpu-id=0</span><br><span class="line">##Boolean property to inform muxer that sources are live</span><br><span class="line">live-source=0</span><br><span class="line">batch-size=1</span><br><span class="line">##time out in usec, to wait after the first buffer is available</span><br><span class="line">##to push the batch even if the complete batch is not formed</span><br><span class="line">batched-push-timeout=40000</span><br><span class="line">## Set muxer output width and height</span><br><span class="line">width=1920</span><br><span class="line">height=1080</span><br><span class="line">##Enable to maintain aspect ratio wrt source, and allow black borders, works</span><br><span class="line">##along with width, height properties</span><br><span class="line">enable-padding=0</span><br><span class="line">nvbuf-memory-type=0</span><br><span class="line"></span><br><span class="line"># config-file property is mandatory for any gie section.</span><br><span class="line"># Other properties are optional and if set will override the properties set in</span><br><span class="line"># the infer config file.</span><br><span class="line">[primary-gie]</span><br><span class="line">enable=1</span><br><span class="line">gpu-id=0</span><br><span class="line">#model-engine-file=model_b1_gpu0_int8.engine</span><br><span class="line"># 修改标签文件</span><br><span class="line">labelfile-path=helmet_names.txt</span><br><span class="line">batch-size=1</span><br><span class="line">#Required by the app for OSD, not a plugin property</span><br><span class="line">bbox-border-color0=1;0;0;1</span><br><span class="line">bbox-border-color1=0;1;1;1</span><br><span class="line">bbox-border-color2=0;0;1;1</span><br><span class="line">bbox-border-color3=0;1;0;1</span><br><span class="line">interval=2</span><br><span class="line">gie-unique-id=1</span><br><span class="line">nvbuf-memory-type=0</span><br><span class="line"># 修改config文件</span><br><span class="line">config-file=config_infer_helmet_yoloV3.txt</span><br><span class="line"></span><br><span class="line">[tracker]</span><br><span class="line">enable=1</span><br><span class="line">tracker-width=640</span><br><span class="line">tracker-height=384</span><br><span class="line">ll-lib-file=/opt/nvidia/deepstream/deepstream-5.0/lib/libnvds_mot_klt.so</span><br><span class="line"></span><br><span class="line">[tests]</span><br><span class="line">file-loop=0</span><br></pre></td></tr></table></figure><p>如果要检测多个视频，只要在<code>deepstream_app_config_yoloV3.txt</code>文件中添加<code>source</code>和<code>sink</code>并且一一对应即可。</p><h3 id="检测结果"><a href="#检测结果" class="headerlink" title="检测结果"></a>检测结果</h3><p>安全帽检测</p><p><img src="/2021/07/10/week-2-2/2-3.png" alt="18"></p><p>使用安全帽检测模型同时检测2个视频文件</p><p><img src="/2021/07/10/week-2-2/2-4.png" alt="18"></p><p>第一次运行生成<code>engine</code>，这是最耗时的地方，<code>engine</code>只在第一次运行生成，然后可以把<code>config_infer_primary_yoloV3.txt</code>文件中配置打开，多次运行时不必再生成<code>engine</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 当这项配置打开时，这样只会在第一次生成引擎，后续启动会很快。</span><br><span class="line">model-engine-file=yolov3_b1_gpu0_int8.engine</span><br></pre></td></tr></table></figure><h2 id="测试时间"><a href="#测试时间" class="headerlink" title="测试时间"></a>测试时间</h2><p>测试安全帽检测 前处理，推理，后处理所用的时间这部分还没有完成。。。</p><p>尽量尽快补充完成！</p>]]></content>
    
    
    <summary type="html">Deepstream YoloV3检测安全帽</summary>
    
    
    
    <category term="Internship" scheme="http://example.com/categories/Internship/"/>
    
    
    <category term="Jetson" scheme="http://example.com/tags/Jetson/"/>
    
    <category term="Deepstreeam" scheme="http://example.com/tags/Deepstreeam/"/>
    
  </entry>
  
  <entry>
    <title>Installing  GStreamer</title>
    <link href="http://example.com/2021/07/09/week-2-1/"/>
    <id>http://example.com/2021/07/09/week-2-1/</id>
    <published>2021-07-09T13:01:50.000Z</published>
    <updated>2021-07-11T06:48:49.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Installing-GStreamer"><a href="#Installing-GStreamer" class="headerlink" title="Installing  GStreamer"></a>Installing  GStreamer</h1><h2 id="Installing-on-Linux"><a href="#Installing-on-Linux" class="headerlink" title="Installing on Linux"></a>Installing on Linux</h2><p><strong>系统：Ubuntu 16.04</strong></p><p>参照<a href="https://gstreamer.freedesktop.org/documentation/installing/on-linux.html?gi-language=c">官方文档</a>，运行以下命令，但是在我的笔记本和公司的台式机上似乎不太ok…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio</span><br></pre></td></tr></table></figure><p><a href="https://samwhelp.github.io/note-ubuntu-18.04/read/howto/install-tool/gstreamer/">参考</a>了一位湾湾网友，运行以下命令成功安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools</span><br></pre></td></tr></table></figure><p><strong>Package</strong></p><ul><li><a href="https://packages.ubuntu.com/bionic/libgstreamer1.0-0">libgstreamer1.0-0</a></li><li><a href="https://packages.ubuntu.com/bionic/gstreamer1.0-plugins-base">gstreamer1.0-plugins-base</a></li><li><a href="https://packages.ubuntu.com/bionic/gstreamer1.0-plugins-good">gstreamer1.0-plugins-good</a></li><li><a href="https://packages.ubuntu.com/bionic/gstreamer1.0-plugins-bad">gstreamer1.0-plugins-bad</a></li><li><a href="https://packages.ubuntu.com/bionic/gstreamer1.0-plugins-ugly">gstreamer1.0-plugins-ugly</a></li><li><a href="https://packages.ubuntu.com/bionic/gstreamer1.0-libav">gstreamer1.0-libav</a></li><li><a href="https://packages.ubuntu.com/bionic/gstreamer1.0-doc">gstreamer1.0-doc</a></li><li><a href="https://packages.ubuntu.com/bionic/gstreamer1.0-tools">gstreamer1.0-tools</a></li></ul><p><strong>验证安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l | grep gstreamer</span><br></pre></td></tr></table></figure><p><strong>使用 GStreamer 构建应用程序</strong></p><p>为了编译 GStreamer 并使用 GStreamer 核心库的代码，需在<code>gcc</code>后添加以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg-config --cflags --libs gstreamer-1.0</span><br></pre></td></tr></table></figure><p>如果使用其他 GStreamer 库，例如视频库，则必须在上述 gstreamer-1.0 之后添加其他包（例如，视频库的 gstreamer-video-1.0）</p><p><strong>获取tutorial’s source code</strong></p><p>可以使用以下命令git到本地，可以在文件目录<code>gst/examples/tutorials</code>中找到例程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitlab.freedesktop.org/gstreamer/gst-docs</span><br></pre></td></tr></table></figure><p><strong>Building the tutorials</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc basic-tutorial-1.c -o basic-tutorial-1 `pkg-config --cflags --libs gstreamer-1.0`</span><br></pre></td></tr></table></figure><p><strong>Running the tutorials</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./basic-tutorial-1</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><img src="/2021/07/09/week-2-1/2_1.png" alt="1"></p><p><strong>nice</strong>！</p><h2 id="Installing-on-Windows"><a href="#Installing-on-Windows" class="headerlink" title="Installing on Windows"></a>Installing on Windows</h2><p>首先参照<a href="https://gstreamer.freedesktop.org/documentation/installing/on-windows.html?gi-language=c">官方文档</a>安装，真的蛮心累的，英文我都能看懂，但就是搞不定。记录一下GStreamer on Windows的崎岖之路。</p><p><strong>环境：Win 10 + VS2017</strong></p><p><strong>1. 下载GStreamer</strong></p><p>选择MSVC 64-bit(有mingw可选)</p><p><a href="https://gstreamer.freedesktop.org/data/pkg/windows/1.18.4/msvc/gstreamer-1.0-msvc-x86_64-1.18.4.msi">gstreamer-1.0-msvc-x86_64-1.18.4.msi</a>               先装</p><p><a href="https://gstreamer.freedesktop.org/data/pkg/windows/1.18.4/msvc/gstreamer-1.0-devel-msvc-x86_64-1.18.4.msi">gstreamer-1.0-devel-msvc-x86_64-1.18.4.msi</a>    后装</p><p>安装的时候都选择<code>Complete</code>完整安装，默认会安装在剩余空间最大的盘符</p><p><strong>2. 配置系统变量</strong></p><p>首先将<code>glibconfig.h</code>文件拷贝到<code>include/glib-2.0</code>以及<code>include/glib-2.0/glib</code>目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|-- lib</span><br><span class="line">|   |-- glib-2.0</span><br><span class="line">|   |    -- include</span><br><span class="line">|   |        -- glibconfig.h 此文件拷贝到</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|-- include</span><br><span class="line">|     --glib-2.0 此目录下</span><br><span class="line">|        -- glib 以及此目录下</span><br></pre></td></tr></table></figure><p>添加用户变量</p><p><img src="/2021/07/09/week-2-1/2_3.png" alt="3"></p><p>添加系统变量</p><p><img src="/2021/07/09/week-2-1/2_4.png" alt="4"></p><p>Path中添加路径</p><p><img src="/2021/07/09/week-2-1/2_5.png" alt="5"></p><p><strong>3. 环境测试</strong></p><ul><li><p>影像测试，打开cmd运行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gst-launch-1.0 videotestsrc ! videoconvert ! autovideosink</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2021/07/09/week-2-1/2_6.png" alt="6"></p><ul><li><p>撞球测试，打开cmd运行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gst-launch-1.0 -v videotestsrc pattern=ball ! video/x-raw,width=320,height=240 ! videoconvert ! tee ! autovideosink device=0</span><br></pre></td></tr></table></figure><p><img src="/2021/07/09/week-2-1/2_7.png" alt="7"></p></li></ul><p>至此，GStreamer的MSCV环境ok，接下来在VS2017配置GStreamer</p><p><strong>4. VS2017配置GStreamer</strong></p><p>还是之前下载的<a href="https://medium.com/r/?url=https://gitlab.freedesktop.org/gstreamer/gst-docs/">gst-docs</a>，用VS打开，双击<code>tutorials.sln</code></p><p><img src="/2021/07/09/week-2-1/2_8.png" alt="8"></p><p><code>tutorials</code>给的是<code>VS2010</code>的例程，当然要升级一下啦</p><p><img src="/2021/07/09/week-2-1/2_9.png" alt="9"></p><p>打开后是这样滴</p><p><img src="/2021/07/09/week-2-1/2_9_1.png" alt="9_1"></p><p>站起来活动一下，直直腰可以开始啦，一上来全是<code>Errors</code>，能运行才奇怪捏。。。</p><p><img src="/2021/07/09/week-2-1/2_10.png" alt="10"></p><p>重点来了，第一次给<code>VS2017</code>配置第三方库</p><p>① 解决方案资源管理器里选择项目名，右键项目，选择属性</p><p>在配置属性——调试——工作目录 增加如下目录(选择活动(x64)平台哦，接下来都是)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\gstreamer\1.0\msvc_x86_64\bin</span><br></pre></td></tr></table></figure><p><img src="/2021/07/09/week-2-1/2_11.png" alt="11"></p><p>②在C/C++ —— 常规——附加包含目录 增加如下目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\gstreamer\1.0\msvc_x86_64\include\gstreamer-1.0</span><br><span class="line">D:\gstreamer\1.0\msvc_x86_64\include\glib-2.0</span><br><span class="line">D:\gstreamer\1.0\msvc_x86_64\include\libxml2</span><br><span class="line">D:\gstreamer\1.0\msvc_x86_64\include</span><br><span class="line">D:\gstreamer\1.0\msvc_x86_64\lib\glib-2.0\include</span><br></pre></td></tr></table></figure><p><img src="/2021/07/09/week-2-1/2_12.png" alt="12"></p><p>③在链接器—-常规—-附加库目录，增加 如下目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\gstreamer\1.0\msvc_x86_64\lib</span><br></pre></td></tr></table></figure><p><img src="/2021/07/09/week-2-1/2_13.png" alt="13"></p><p>④在链接器—-输入—–附加依赖性 增加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gobject-2.0.lib</span><br><span class="line">glib-2.0.lib</span><br><span class="line">gstreamer-1.0.lib</span><br></pre></td></tr></table></figure><p><img src="/2021/07/09/week-2-1/2_14.png" alt="14"></p><p>测试一下，运行一下<code>basic-tutorial-1.c</code>，没有报错了，撒花<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> </p><p><img src="/2021/07/09/week-2-1/2_15.png" alt="15"></p><p>运行结果</p><p><img src="/2021/07/09/week-2-1/2_17.png" alt="17"></p><p><code>basic-tutorial-1.c</code>的代码就先不解读啦，里面注释很清晰了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gst/gst.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GstElement *pipeline;</span><br><span class="line">GstBus *bus;</span><br><span class="line">GstMessage *msg;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Initialize GStreamer */</span></span><br><span class="line">gst_init(&amp;argc, &amp;argv);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Build the pipeline */</span></span><br><span class="line">pipeline =</span><br><span class="line">gst_parse_launch</span><br><span class="line">(<span class="string">&quot;playbin uri=https://www.freedesktop.org/software/gstreamer-sdk/data/media/sintel_trailer-480p.webm&quot;</span>,</span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Start playing */</span></span><br><span class="line">gst_element_set_state(pipeline, GST_STATE_PLAYING);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wait until error or EOS */</span></span><br><span class="line">bus = gst_element_get_bus(pipeline);</span><br><span class="line">msg =</span><br><span class="line">gst_bus_timed_pop_filtered(bus, GST_CLOCK_TIME_NONE,</span><br><span class="line">GST_MESSAGE_ERROR | GST_MESSAGE_EOS);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Free resources */</span></span><br><span class="line"><span class="keyword">if</span> (msg != <span class="literal">NULL</span>)</span><br><span class="line">gst_message_unref(msg);</span><br><span class="line">gst_object_unref(bus);</span><br><span class="line">gst_element_set_state(pipeline, GST_STATE_NULL);</span><br><span class="line">gst_object_unref(pipeline);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>GStreamer on Windows的安装至此算是搞定了，还是有花蛮多精力的！No pains, no gains. 接下来还要学写GStreamer插件，能写好的再记录一下！</p><p><strong>参考</strong></p><p><a href="https://gstreamer.freedesktop.org/data/pkg/windows/1.18.4/msvc/">https://gstreamer.freedesktop.org/data/pkg/windows/1.18.4/msvc/</a></p><p><a href="https://gstreamer.freedesktop.org/documentation/installing/index.html?gi-language=c">https://gstreamer.freedesktop.org/documentation/installing/index.html?gi-language=c</a></p><p><a href="https://www.cnblogs.com/0-lingdu/p/12718613.html">https://www.cnblogs.com/0-lingdu/p/12718613.html</a></p><p><a href="https://blog.csdn.net/kongxingxing/article/details/104270463">https://blog.csdn.net/kongxingxing/article/details/104270463</a></p><p><a href="https://blog.csdn.net/fly_bear_unknown/article/details/113917633">https://blog.csdn.net/fly_bear_unknown/article/details/113917633</a></p>]]></content>
    
    
    <summary type="html">GStreamer在Ubuntu和Windows上安装</summary>
    
    
    
    <category term="Internship" scheme="http://example.com/categories/Internship/"/>
    
    
    <category term="GStreamer" scheme="http://example.com/tags/GStreamer/"/>
    
  </entry>
  
  <entry>
    <title>Jetson 部署 Deepstream</title>
    <link href="http://example.com/2021/07/02/week-1/"/>
    <id>http://example.com/2021/07/02/week-1/</id>
    <published>2021-07-02T12:13:16.000Z</published>
    <updated>2021-07-14T13:10:10.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jetson-部署-Deep-stream"><a href="#Jetson-部署-Deep-stream" class="headerlink" title="Jetson 部署 Deep stream"></a>Jetson 部署 Deep stream</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="查看Jetson信息"><a href="#查看Jetson信息" class="headerlink" title="查看Jetson信息"></a><strong>查看Jetson信息</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sudo pip3 install jetson-stats</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jtop</span></span><br></pre></td></tr></table></figure><p><img src="/2021/07/02/week-1/01.png" alt="01"></p><h3 id="Jetson-Setup"><a href="#Jetson-Setup" class="headerlink" title="Jetson Setup"></a><strong>Jetson Setup</strong></h3><p>如果是 Jetson Nano 或者 Jetson Xavier NX developer kit, 从<a href="https://developer.nvidia.com/embedded/jetpack">JetPack SDK</a>下载 SD card image，这其中包含了 CUDA, TensorRT and cuDNN.</p><h3 id="命令行工具nvpmodel"><a href="#命令行工具nvpmodel" class="headerlink" title="命令行工具nvpmodel"></a><strong>命令行工具nvpmodel</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo nvpmodel --query</span></span><br><span class="line">NV Fan Mode:cool</span><br><span class="line">NV Power Mode: MODE_15W_2CORE</span><br><span class="line">0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到模式2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo nvpmodel -m 2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最大化Xavier性能</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo jetson_clocks</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前设置：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo jetson_clocks --show</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复以前的设置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo jetson_clocks --restore</span></span><br></pre></td></tr></table></figure><h3 id="查看操作系统信息"><a href="#查看操作系统信息" class="headerlink" title="查看操作系统信息"></a><strong>查看操作系统信息</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Linux查看版本当前操作系统 内核信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> uname --a</span></span><br><span class="line">Linux name-desktop 4.9.140-tegra #1 SMP PREEMPT Thu Jun 25 21:22:12 PDT 2020 aarch64 aarch64 aarch64 GNU/Linux</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Linux查看当前操作系统 版本信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/version</span></span><br><span class="line">Linux version 4.9.140-tegra (buildbrain@mobile-u64-3357) (gcc version 7.3.1 20180425 [linaro-7.3-2018.05 revision d29120a424ecfbc167ef90065c0eeb7f91977701] (Linaro GCC 7.3-2018.05) ) #1 SMP PREEMPT Thu Jun 25 21:22:12 PDT 2020</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Linux查看版本当前操作系统 发行版信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/issue</span></span><br><span class="line">Ubuntu 18.04.5 LTS \n \l</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看cpu的信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/cpuinfo</span></span><br><span class="line">processor: 0</span><br><span class="line">model name: ARMv8 Processor rev 0 (v8l)</span><br><span class="line">BogoMIPS: 62.50</span><br><span class="line">Features: fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp</span><br><span class="line">CPU implementer: 0x4e</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant: 0x0</span><br><span class="line">CPU part: 0x004</span><br><span class="line">CPU revision: 0</span><br><span class="line">MTS version: 50168445</span><br><span class="line">…</span><br><span class="line">…</span><br><span class="line">…</span><br><span class="line">processor: 5</span><br><span class="line">model name: ARMv8 Processor rev 0 (v8l)</span><br><span class="line">BogoMIPS: 62.50</span><br><span class="line">Features: fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp</span><br><span class="line">CPU implementer: 0x4e</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant: 0x0</span><br><span class="line">CPU part: 0x004</span><br><span class="line">CPU revision: 0</span><br><span class="line">MTS version: 50168445</span><br></pre></td></tr></table></figure><h3 id="DeepStream-Setup"><a href="#DeepStream-Setup" class="headerlink" title="DeepStream Setup"></a>DeepStream Setup</h3><ol><li><p><a href="https://developer.nvidia.com/deepstream-sdk">NVIDIA DeepStream SDK</a>官网下载 <code>deepstream_sdk_v5.0.1_jetson.tbz2</code></p></li><li><p>命令行执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo tar -xvf deepstream_sdk_v5.0.1_jetson.tbz2 -C /</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/nvidia/deepstream/deepstream-5.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ./install.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ldconfig</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="/2021/07/02/week-1/02.png" alt="02"></p><h3 id="Run-deepstream-app"><a href="#Run-deepstream-app" class="headerlink" title="Run deepstream-app"></a>Run deepstream-app</h3><ol><li><p>导航到示例目录(samples)。</p></li><li><p>输入以下命令以运行参考应用程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deepstream-app -c &lt;path_to_config_file&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;path_to_config_file&gt;</code>可以在<code>configs/deepstream-app/</code>中找到</p></li><li><p>在源文件目录中找到源码，编译并运行demo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 源文件目录（deepstream-test1）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 都需要make编译，具体请参阅其中的README文档</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/nvidia/deepstream/deepstream-5.0/sources/apps/sample_apps/deepstream-test1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">deepstream_test1_app.c  dstest1_pgie_config.txt  Makefile  README</span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">deepstream-test1-app    deepstream_test1_app.o   Makefile</span><br><span class="line">deepstream_test1_app.c  dstest1_pgie_config.txt  README</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行deepstream-test1-app</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./deepstream-test1-app /opt/nvidia/deepstream/deepstream-5.0/samples/streams/sample_720p.h264</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Reference test application</th><th align="center">Path inside sources directory</th><th>Description</th></tr></thead><tbody><tr><td align="center">Sample test application 1</td><td align="center">apps/sample_apps/deepstream-test1</td><td>Sample of how to use DeepStream elements for a single H.264 stream: filesrc → decode → nvstreammuH264 containerized streamx → nvinfer (primary detector) → nvdsosd → renderer.</td></tr><tr><td align="center">Sample test application 2</td><td align="center">apps/sample_apps/deepstream-test2</td><td>Sample of how to use DeepStream elements for a single H.264 stream: filesrc → decode → nvstreammux → nvinfer (primary detector) → nvtracker → nvinfer (secondary classifier) → nvdsosd → renderer.</td></tr><tr><td align="center">Sample test application 3</td><td align="center">apps/sample_apps/deepstream-test3</td><td>Builds on deepstream-test1 (simple test application 1) to demonstrate how to:Use multiple sources in the pipelineUse a uridecodebin to accept any type of input (e.g. RTSP/File), any GStreamer supported container format, and any codecConfigure Gst-nvstreammux to generate a batch of frames and infer on it for better resource utilizationExtract the stream metadata, which contains useful information about the frames in the batched buffer</td></tr><tr><td align="center">Sample test application 4</td><td align="center">apps/sample_apps/deepstream-test4</td><td>Builds on deepstream-test1 for a single H.264 stream: filesrc, decode, nvstreammux, nvinfer, nvdsosd, renderer to demonstrate how to:Use the Gst-nvmsgconv and Gst-nvmsgbroker plugins in the pipelineCreate NVDS_META_EVENT_MSG type metadata and attach it to the bufferUse NVDS_META_EVENT_MSG for different types of objects, e.g. vehicle and personImplement “copy” and “free” functions for use if metadata is extended through the extMsg field</td></tr><tr><td align="center">Sample test application 5</td><td align="center">apps/sample_apps/deepstream-test5</td><td>Builds on top of deepstream-app. Demonstrates:Use of Gst-nvmsgconv and Gst-nvmsgbroker plugins in the pipeline for multistreamHow to configure Gst-nvmsgbroker plugin from the config file as a sink plugin (for KAFKA, Azure, etc.)How to handle the RTCP sender reports from RTSP servers or cameras and translate the Gst Buffer PTS to a UTC timestamp.For more details refer the RTCP Sender Report callback function <code>test5_rtcp_sender_report_callback()</code> registration and usage in <code>deepstream_test5_app_main.c</code>. GStreamer callback registration with rtpmanager element’s “handle-sync” signal is documented in <code>apps-common/src/deepstream_source_bin.c</code>.</td></tr></tbody></table></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">|-- opt</span><br><span class="line">    |-- nvidia</span><br><span class="line">        |-- deepstream</span><br><span class="line">            |-- deepstream</span><br><span class="line">            |-- deepstream-5.0</span><br><span class="line">                |-- bin</span><br><span class="line">                |-- doc</span><br><span class="line">                |-- lib</span><br><span class="line">                |-- samples</span><br><span class="line">                |   |-- configs</span><br><span class="line">                |   |   |-- deepstream-app</span><br><span class="line">                |   |   |   |-- config_infer_primary.txt#将nvinfer配置为主要检测器</span><br><span class="line">                |   |   |   |-- config_infer_primary_nano.txt</span><br><span class="line">                |   |   |   |-- config_infer_secondary_carcolor.txt#将nvinfer配置为辅助分类器</span><br><span class="line">                |   |   |   |-- config_infer_secondary_carmake.txt</span><br><span class="line">                |   |   |   |-- config_infer_secondary_vehicletypes.txt</span><br><span class="line">                |   |   |   |-- iou_config.txt#配置一个低级的IOU跟踪器。</span><br><span class="line">                |   |   |   |-- source12_1080p_dec_infer-resnet_tracker_tiled_display_fp16_tx2.txt</span><br><span class="line">                |   |   |   |-- source1_csi_dec_infer_resnet_int8.txt   #演示一个CSI摄像机作为输入；仅适用于Jetson</span><br><span class="line">                |   |   |   |-- source1_usb_dec_infer_resnet_int8.txt#演示一个USB摄像机作为输入</span><br><span class="line">                |   |   |   |-- source2_csi_usb_dec_infer_resnet_int8.txt</span><br><span class="line">                                #演示30个具有主要推理功能的流解码（仅适用于dGPU和Jetson AGX Xavier平台）</span><br><span class="line">                |   |   |   |-- source30_1080p_dec_infer-resnet_tiled_display_int8.txt </span><br><span class="line">                #演示具有主要推理，对象跟踪和三个不同辅助分类器的四个流解码（仅适用于dGPU和Jetson AGX Xavier平台）</span><br><span class="line">                |   |   |   |-- source4_1080p_dec_infer-resnet_tracker_sgie_tiled_display_int8.txt</span><br><span class="line">                |   |   |   |-- source6_csi_dec_infer_resnet_int8.txt</span><br><span class="line">                |   |   |   |-- source8_1080p_dec_infer-resnet_tracker_tiled_display_fp16_nano.txt</span><br><span class="line">                |   |   |   |-- source8_1080p_dec_infer-resnet_tracker_tiled_display_fp16_tx1.txt</span><br><span class="line">                |   |   |   |-- tracker_config.yml#配置NvDCF跟踪器</span><br><span class="line">                |   |   |-- deepstream-app-trtis</span><br><span class="line">                |   |   |-- tlt_pretrained_models</span><br><span class="line">                |   |-- models</span><br><span class="line">                |   |-- streams</span><br><span class="line">                |   |   |-- sample_1080p_h264.mp4#H264 containerized stream</span><br><span class="line">                |   |   |-- sample_1080p_h265.mp4#H265 containerized stream</span><br><span class="line">                |   |   |-- sample_720p.h264#H264 elementary stream</span><br><span class="line">                |   |   |-- sample_720p.jpg#JPEG image</span><br><span class="line">                |   |   |-- sample_720p.mjpeg#MJPEG stream</span><br><span class="line">                |   |   |-- sample_720p.mp4</span><br><span class="line">                |   |   |-- sample_cam6.mp4#H264 containerized stream(360D camera stream)</span><br><span class="line">                |   |   |-- sample_industrial.jpg</span><br><span class="line">                |   |   |-- sample_qHD.h264</span><br><span class="line">                |   |   |-- sample_qHD.mp4</span><br><span class="line">                |   |   |-- yoga.jpg</span><br><span class="line">                |   |   |-- yoga.mp4</span><br><span class="line">                |   |-- trtis_model_repo</span><br><span class="line">                |-- sources</span><br><span class="line">                    |-- apps</span><br><span class="line">                    |   |-- apps-common</span><br><span class="line">                    |   |   |-- includes</span><br><span class="line">                    |   |-- sample_apps</span><br><span class="line">                    |       |-- deepstream-app#端到端示例演示了4级联神经网络(1个一级检测器和3个二级分类器)的多相机流，并显示平铺输出。</span><br><span class="line">                    |       |   |-- Makefile</span><br><span class="line">                    |       |   |-- README</span><br><span class="line">                    |       |   |-- deepstream_app.c</span><br><span class="line">                    |       |   |-- deepstream_app.h</span><br><span class="line">                    |       |   |-- deepstream_app_config_parser.c</span><br><span class="line">                    |       |   |-- deepstream_app_main.c</span><br><span class="line">                    |       |-- deepstream-test1#对单一H264视频流，应用filesrc→decode→nvstreammuH264 containerized streamx→nvinfer(主检测器)→nvdsosd→renderer</span><br><span class="line">                    |       |   |-- Makefile</span><br><span class="line">                    |       |   |-- README</span><br><span class="line">                 Builds on deepstream-test1 (simple test application 1) to demonstrate how to:Use multiple sources in the pipelineUse a uridecodebin to accept any type of input (e.g. RTSP/File), any GStreamer supported container format, and any codecConfigure Gst-nvstreammux to generate a batch of frames and infer on it for better resource utilizationExtract the stream metadata, which contains useful information about the frames in the batched buffer   |       |   |-- deepstream-test1-app</span><br><span class="line">                    |       |   |-- deepstream_test1_app.c</span><br><span class="line">                    |       |   |-- deepstream_test1_app.o</span><br><span class="line">                    |       |   |-- dstest1_pgie_config.txt</span><br><span class="line">                    |       |-- deepstream-test2#建立在test1之上，显示额外的属性，如跟踪和二级分类属性。</span><br><span class="line">                    |       |   |-- Makefile</span><br><span class="line">                    |       |   |-- README</span><br><span class="line">                    |       |   |-- deepstream_test2_app.c</span><br><span class="line">                    |       |   |-- dstest2_pgie_config.txt</span><br><span class="line">                    |       |   |-- dstest2_sgie1_config.txt</span><br><span class="line">                    |       |   |-- dstest2_sgie2_config.txt</span><br><span class="line">                    |       |   |-- dstest2_sgie3_config.txt</span><br><span class="line">                    |       |   |-- dstest2_tracker_config.txt</span><br><span class="line">                    |       |   |-- tracker_config.yml</span><br><span class="line">                    |       |-- deepstream-test3#建立在test1的基础上，显示多个输入源和批处理使用nvstreammuxer。</span><br><span class="line">                    |       |   |-- Makefile</span><br><span class="line">                    |       |   |-- README</span><br><span class="line">                    |       |   |-- deepstream_test3_app.c</span><br><span class="line">                    |       |   |-- dstest3_pgie_config.txt</span><br><span class="line">                    |       |-nfer_primary.txt</span><br><span class="line">                |   |   |   |-- config_infer_primary_nano.txt</span><br><span class="line">                |   |   |   |-- config_infer_secondary_carcolor.txt</span><br><span class="line">                |   |   |   |-- config_infer_secondary_carmake.txt</span><br><span class="line">                |   |   |   |-- config_infer_secondary_vehicletypes.txt</span><br><span class="line">                |   |   |   |-- iou_config.txt</span><br><span class="line">                |   |   |   |-- source12_1080p_dec_infer-resnet_tracker_tiled_display_fp16_tx2.txt</span><br><span class="line">                |   |   |   |-- source1_csi_dec_infer_resnet_int8.txt</span><br><span class="line">                |   |   |   |-- source1_usb_dec_infer_resnet_int8.txt</span><br><span class="line">                |   |   |   |-- source2_cs- deepstream-test4</span><br><span class="line">                    |       |   |-- Makefile</span><br><span class="line">                    |       |   |-- README</span><br><span class="line">                    |       |   |-- cfg_amqp.txt</span><br><span class="line">                    |       |   |-- cfg_azure.txt</span><br><span class="line">                    |       |   |-- cfg_kafka.txt</span><br><span class="line">                    |       |   |-- deepstream_test4_app.c</span><br><span class="line">                    |       |   |-- dstest4_msgconv_config.txt</span><br><span class="line">                    |       |   |-- dstest4_pgie_config.txt</span><br><span class="line">                    |       |-- deepstream-test5</span><br><span class="line">                    |       |   |-- Makefile</span><br><span class="line">                    |       |   |-- README</span><br><span class="line">                    |       |   |-- deepstream_test5_app.h</span><br><span class="line">                    |       |   |-- deepstream_test5_app_main.c</span><br><span class="line">                    |       |   |-- deepstream_utc.c</span><br><span class="line">                    |       |   |-- configs</span><br><span class="line">                    |       |       |-- dstest5_msgconv_sample_config.txt</span><br><span class="line">                    |       |       |-- test5_config_file_src_infer.txt</span><br><span class="line">                    |       |       |-- test5_config_file_src_infer_azure_iotedge.txt</span><br><span class="line">                    |       |       |-- test5_config_file_src_infer_tiler_demux.txt</span><br><span class="line">                    |       |       |-- test5_config_file_src_infer_tracker_sgie.txt</span><br><span class="line">                    |       |       |-- test5_dec_infer-resnet_tracker_sgie_tiled_display_int8.txt</span><br><span class="line">                    |       |       |-- test5_ota_override_config.txt</span><br><span class="line">                    |-- gst-plugins</span><br><span class="line">                    |-- includes</span><br><span class="line">                    |-- libs</span><br><span class="line">                    |-- objectDetector_FasterRCNN</span><br><span class="line">                    |-- objectDetector_SSD</span><br><span class="line">                    |-- objectDetector_Yolo</span><br><span class="line">                    |-- tools</span><br></pre></td></tr></table></figure><p>日志信息：</p><p><img src="/2021/07/02/week-1/04.png" alt="04"><br>结果显示：</p><p><img src="/2021/07/02/week-1/05.png" alt="05"></p><p><img src="/2021/07/02/week-1/08.png" alt="08"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.nvidia.com/metropolis/deepstream/dev-guide/index.html">NVIDIA DeepStream SDK开发指南</a></p><p><a href="https://docs.nvidia.com/metropolis/deepstream/plugin-manual/index.html">NVIDIA DeepStream插件手册</a></p><p><a href="https://docs.nvidia.com/metropolis/deepstream/dev-guide/">NVIDIA DeepStream SDK API参考文档</a></p>]]></content>
    
    
    <summary type="html">Jetson Xavier NX部署 Deepstream</summary>
    
    
    
    <category term="Internship" scheme="http://example.com/categories/Internship/"/>
    
    
    <category term="Jetson" scheme="http://example.com/tags/Jetson/"/>
    
    <category term="Deepstreeam" scheme="http://example.com/tags/Deepstreeam/"/>
    
  </entry>
  
  <entry>
    <title>CMake&amp;Meson 边学边记</title>
    <link href="http://example.com/2021/04/10/cmake-notes/"/>
    <id>http://example.com/2021/04/10/cmake-notes/</id>
    <published>2021-04-10T12:32:42.000Z</published>
    <updated>2021-07-22T11:55:09.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CMake笔记"><a href="#CMake笔记" class="headerlink" title="CMake笔记"></a>CMake笔记</h1><p><strong>一开始是记录CMake的学习，7月份实习用到了Meson，故也记录在了这篇文章中。</strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><ul><li>网址：<a href="https://cmake.org/download/">https://cmake.org/download/</a></li></ul><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><ul><li><p>直接安装 <code>apt install cmake</code></p></li><li><p>网址：<a href="https://cmake.org/download/">https://cmake.org/download/</a>     下载对应版本的CMake（32位或者64位）</p></li><li><p>输入以下命令进行解压</p><p><code>    tar -zxvf cmake-3.10.0-rc4-Linux-x86_64.tar.gz</code></p></li><li><p>把解压后的目录改名为：cmake</p><p><code>mv cmake-3.10.0-rc4-Linux-x86_64 cmake</code></p></li><li><p>安装完毕，命令行输入：<code>cmake --version</code>检测是否安装成功</p></li></ul><h2 id="CMake初探"><a href="#CMake初探" class="headerlink" title="CMake初探"></a>CMake初探</h2><p><strong>基本都在我的阿里云服务器上倒腾，环境为Ubuntu 16.04</strong></p><h3 id="CMake基础知识"><a href="#CMake基础知识" class="headerlink" title="CMake基础知识"></a>CMake基础知识</h3><ul><li><p>最低版本</p><ul><li><p><code>CMakeLists.txt</code>的第一行都会写：<code>cmake_minimum_required(VERSION 3.1)</code>，该命令指定了CMake的最低版本是3.1</p></li><li><p>命令名称<code>cmake_minimum_required</code>不区分大小写</p></li><li><p>设置版本范围：<code>cmake_minimum_required(VERSION 3.1...3.12)</code></p></li><li><p>判断CMake版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#该命令表示：如果CMake版本小于3.12，则if块将为true，然后将设置为当前CMake版本</span><br><span class="line">#如果CMake版本高于3.12，if块为假，cmake_minimum_required将被正确执行</span><br><span class="line">if($&#123;CMAKE_VERSION&#125; VERSION_LESS 3.12)     </span><br><span class="line">    cmake_policy(VERSION $&#123;CMAKE_MAJOR_VERSION&#125;.$&#123;CMAKE_MINOR_VERSION&#125;) </span><br><span class="line">endif() </span><br></pre></td></tr></table></figure></li><li><p>注意：如果需要支持非命令行Windows版本则需在上面的if判断加上else分支，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.1)</span><br><span class="line">if($&#123;CMAKE_VERSION&#125; VERSION_LESS 3.12)</span><br><span class="line">    cmake_policy(VERSION $&#123;CMAKE_MAJOR_VERSION&#125;.$&#123;CMAKE_MINOR_VERSION&#125;)</span><br><span class="line">else()</span><br><span class="line">    cmake_policy(VERSION 3.12)</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>设置生成项目名称</p><ul><li><p>命令：<code>project（MyProject）</code>,表示生成的工程名字叫做：<code>MyProject</code></p></li><li><p>命令还可以标识项目支持的语言，写法：<code>project（MyProject[C] [C++]）</code>,不过通常将后面的参数省掉，因为默认支持所有语言</p></li><li><p>使用该指令之后系统会自动创建两个变量：<code>&lt;projectname&gt;_BINARY_DIR</code>  二进制文件保存路径、<code>&lt;projectname&gt;_SOURCE_DIR</code>  源代码路径</p></li><li><p>执行<code>project(MyProject)</code>，就是定义了一个项目的名称为<code>MyProject</code>，对应的就会生成两个变量：<code>_BINARY_DIR</code>和<code>_SOURCE_DIR</code>，但是<code>cmake</code>中其实已经有两个预定义的变量：<code>PROJECT_BINARY_DIR</code> 和 <code>PROJECT_SOURCR_DIR</code></p></li><li><p>关于两个变量是否相同，涉及到是内部构建还是外部构建</p><ul><li><p>内部构建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake ./</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>外部构建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd ./build</span><br><span class="line">cmake ../</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>内部构建和外部构建的不同在于：<code>cmake </code>的工作目录不同。内部构建会将<code>cmake</code>生成的中间文件和可执行文件放在和项目同一目录；外部构建的话，中间文件和可执行文件会放在<code>build</code>目录</p></li><li><p><code>PROJECT_SOURCE_DIR</code>和<code>_SOURCE_DIR</code>无论内部构建还是外部构建，指向的内容都是一样的，都指向工程的根目录</p></li><li><p><code>PROJECT_BINARY_DIR</code>和<code>_BINARY_DIR</code>指向的相同内容，内部构建的时候指向<code>CMakeLists.txt</code>文件的目录，外部构建指向<code>target</code>编译的目录</p></li></ul></li></ul></li><li><p>生成可执行文件</p><ul><li><p>语法：<code>add_executable(exename srcname)</code></p><blockquote><ul><li>exename:生成的可执行文件的名字</li><li>srcname:原来的源文件</li></ul></blockquote></li><li><p>该命令指定生成可执行文件的名字以及指出需要依赖的源文件的文件名</p></li><li><p>获取文件路径中的所有源文件</p><ul><li>命令：<code>aux_sourcr_directory(&lt;dir&gt; &lt;variable&gt;)</code></li><li>例子：<code>aux_sourcr_directory(. DIR_SRCS)</code>，将当前目录下的源文件名字存放到变量<code>DIR_SRCS</code>里面 ，如果源文件比较多，直接用<code>DIR_SRCS</code>变量即可</li></ul></li><li><p>生成可执行文件：<code>add_executable(Demo $&#123;DIR_SRCS&#125;)</code>，将生成的可执行文件命名为：<code>Demo</code></p></li></ul></li><li><p>生成<code>lib</code>库</p><ul><li><p>命令：<code>add_library(libname [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN)</code></p><blockquote><ul><li><code>libname</code>:生成的库文件的名字</li><li><code>[SHARED|STATIC|MODULE]</code>：生成库文件的类型（动态库|静态库|模块）</li><li><code>[EXCLUDE_FROM_ALL]</code>：有这个参数表示该库不会被默认构建</li><li><code>source2 ... sourceN</code>：生成库依赖的源文件，如果源文件比较多，可以使用</li><li><code>aux_sourcr_directory</code>命令获取路径下所有源文件，具体章节参见：<code>CMake</code>初探-&gt;生成可执行文件-&gt;获取路径中所有源文件</li></ul></blockquote></li><li><p>例子：<code>add_library(ALib SHARE alib.cpp)</code></p></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_executable(demo demo.cpp) # 生成可执行文件</span><br><span class="line">add_library(common STATIC util.cpp) # 生成静态库</span><br><span class="line">add_library(common SHARED util.cpp) # 生成动态库或共享库</span><br></pre></td></tr></table></figure><blockquote><p><code>add_library</code> 默认生成是静态库，通过以上命令生成文件名字，</p><ul><li>在 Linux 下是：<br>demo<br>libcommon.a<br>libcommon.so</li><li>在 Windows 下是：<br>demo.exe<br>common.lib<br>common.dll</li></ul></blockquote><ul><li><p>添加头文件目录</p><ul><li><p>命令1：<code>target_include_directories(&lt;target&gt; [SYSTEM] [BEFORE]   &lt;INTERFACE|PUBLIC|PRIVATE&gt; [items1...]   [&lt;INTERFACE|PUBLIC|PRIVATE&gt; [items2...] ...])</code></p><blockquote><p>当我们添加子项目之后还需要设置一个<code>include</code>路径，例子：<br>eg:<code>target_include_directories(RigelEditor PUBLIC ./include/rgeditor)</code>，表示给<code>RigelEditor</code> 这个子项目添加一个库文件的路径</p></blockquote></li><li><p>命令2：<code>include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 …])</code></p><blockquote><p>参数解析：</p><ul><li>[AFTER|BEFORE]：指定了要添加路径是添加到原有列表之前还是之后</li><li>[SYSTEM]：若指定了<code>system</code>参数，则把被包含的路径当做系统包含路径来处理</li><li>dir1 [dir2 …]把这些路径添加到<code>CMakeLists</code>及其子目录的<code>CMakeLists</code>的头文件包含项目中<br>相当于<code>g++</code>选项中的-l的参数的作用</li><li>举例：<code>include_directories(&quot;/opt/MATLAB/R2012a/extern/include&quot;)</code></li></ul></blockquote></li></ul><ul><li>两条指令的作用都是讲将<code>include</code>的目录添加到目标区别在于<code>include_directorie</code>s是<code>CMake</code>编译所有目标的目录进行添加，<code>target_include_directories</code>是将<code>CMake</code>编译的指定的特定目标的包含目录进行添加</li></ul></li><li><p>添加需要链接的库文件路径</p><ul><li><p>命令1:<code>target_link_libraries(&lt;target&gt; [item1 [item2 [...]]] [[debug|optimized|general] &lt;item&gt;] ...)</code></p><blockquote><ul><li>作用：为给定的目标设置链接时使用的库（设置要链接的库文件的名称）</li><li>eg:target_link_libraries(MyProject a b.a <a href="http://c.so/">c.so</a>)    //将若干库文件链接到hello中，target_link_libraries里的库文件的顺序符合gcc/g++链接顺序规则，即：被依赖的库放在依赖他的库的后面，如果顺序有错，链接将会报错</li><li>关键字：debug对应于调试配置</li><li>关键字：optimized对应于所有其他的配置类型</li><li>关键字：general对应于所有的配置（该属性是默认值）</li></ul></blockquote></li><li><p>命令2：<code>link_libraries</code></p><blockquote><ul><li>作用：给当前工程链接需要的库文件（全路径）</li><li>eg:<code>link_libraries((&quot;/opt/MATLAB/R2012a/bin/glnxa64/libeng.so&quot;)</code>//必须添加带名字的全路径</li></ul></blockquote></li><li><p>区别：<code>target_link_libraries</code>可以给工程或者库文件设置其需要链接的库文件，而且不需要填写全路径，但是<code>link_libraries</code>只能给工程添加依赖的库，而且必须添加全路径</p></li><li><p>添加需要链接的库文件目录</p><blockquote><ul><li><p>命令：link_directories（添加需要链接的库文件目录）</p></li><li><p>语法：link_directories(directory1 directory2 …)</p></li><li><p>例子：link_directories(“/opt/MATLAB/R2012a/bin/glnxa64”)</p></li></ul></blockquote></li><li><p>指令的区别：指令的前缀带<code>target</code>，表示针对某一个目标进行设置，必须指明设置的目标；<code>include_directories</code>是在编译时用，指明<code>.h</code>文件的路径；<code>link_directoeies</code>是在链接时用的，指明链接库的路径；<code>target_link_libraries</code>是指明链接库的名字，也就是具体谁链接到哪个库。<code>link_libraries</code>不常用，因为必须指明带文件名全路径</p></li></ul></li><li><p>控制目标属性</p><ul><li><p>以上的几条命令的区分都是：是否带<code>target</code>前缀，在<code>CMake</code>里面，一个<code>target</code>有自己的属性集，如果我们没有显示的设置这些<code>target</code>的属性的话，<code>CMake</code>默认是由相关的全局属性来填充<code>target</code>的属性，我们如果需要单独的设置<code>target</code>的属性，需要使用命令：<code>set_target_properties()</code></p></li><li><p>命令格式:</p><blockquote><p>set_target_properties(target1 target2 …<br>PROPERTIES<br>属性名称1  值<br>属性名称2  值<br>…<br>)</p></blockquote></li><li><p>控制编译选项的属性是：<code>COMPILE_FLAGS</code></p></li><li><p>控制链接选项的属性是：<code>LINK_FLAGS</code></p></li><li><p>控制输出路径的属性：<code>EXECUTABLE_OUTPUT_PATH</code>（exe的输出路径）、<code>LIBRARY_OUTPUT_PATH</code>（库文件的输出路径）</p></li><li><p>举例：</p><blockquote><p>set_target_properties(exe<br>PROPERTIES<br>LINK_FLAGS          -static<br>LINK_FLAGS_RELEASE  -s<br>)</p></blockquote><p>这条指令会使得<code>exe</code>这个目标在所有的情况下都采用<code>-static</code>选项，而且在<code>release build</code>的时候<code>-static -s</code>选项。但是这个属性仅仅在<code>exe</code>这个<code>target</code>上面有效</p></li></ul></li></ul><h3 id="Cmake构建示例"><a href="#Cmake构建示例" class="headerlink" title="Cmake构建示例"></a>Cmake构建示例</h3><p>经典的<code>helloworld</code>必须出现啊，首先创建一个<code>main.cpp</code>包含源的文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> parameter_size, <span class="keyword">char</span> **parameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span> + <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> b = a + <span class="number">3</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello word  &quot;</span> &lt;&lt; parameter_size &lt;&lt; <span class="string">&quot;   &quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们创建一个 <code>CMakeLists.txt</code>同一个目录中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.5)</span><br><span class="line">#项目名称</span><br><span class="line">project(test_cmaka)</span><br><span class="line">#代码路径</span><br><span class="line">aux_source_directory(. DIR_TOOT_SRCS)</span><br><span class="line">#dubug 模式</span><br><span class="line">set (CMAKE_CXX_FLAGS  &quot;$&#123;CMAKE_CXX_FLAGS&#125; -g&quot;)</span><br><span class="line">#将可执行文件放入bin目录</span><br><span class="line">set( EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/bin)</span><br><span class="line">#生成可执行的文件</span><br><span class="line">add_executable(main $&#123;DIR_TOOT_SRCS&#125;)</span><br></pre></td></tr></table></figure><p>文件目录 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|-- test_cmake</span><br><span class="line">    |-- main.cpp</span><br><span class="line">    |-- CMakeLists.txt</span><br></pre></td></tr></table></figure><p>现在准备构建我们的应用程序，导航到文件目录下，创建<code>build</code>文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir build</span><br></pre></td></tr></table></figure><p>进入<code>build</code>目录，执行外部构建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd build</span><br><span class="line"># cmake ../</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- The C compiler identification is GNU 7.5.0</span><br><span class="line">-- The CXX compiler identification is GNU 7.5.0</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc -- works</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++ -- works</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - done</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - done</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /root/share/C++/test_cmake/build</span><br></pre></td></tr></table></figure><p>再看看目录下的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMakeCache.txt  CMakeFiles  cmake_install.cmake  Makefile</span><br></pre></td></tr></table></figure><p>可以看到成功生成了Makefile，还有一些cmake运行时自动生成的文件<br>然后在终端下输入make并回车,输出以下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Scanning dependencies of target main</span><br><span class="line">[ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o</span><br><span class="line">[100%] Linking CXX executable ../bin/main</span><br><span class="line">[100%] Built target main</span><br></pre></td></tr></table></figure><p>此时，文件目录如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|-- test_cmake</span><br><span class="line">    |-- bin</span><br><span class="line">    |-- build</span><br><span class="line">    |-- main.cpp</span><br><span class="line">    |-- CMakeLists.txt</span><br></pre></td></tr></table></figure><p>生成的可执行文件在<code>bin</code>目录下，导航到该目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../bin</span><br><span class="line">./main</span><br></pre></td></tr></table></figure><p>产生预期的输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello word  1 </span><br></pre></td></tr></table></figure><p><code>github</code>上有不错的<code>CMake——examples</code>  链接：<a href="https://github.com/ttroy50/cmake-examples">https://github.com/ttroy50/cmake-examples</a></p><h1 id="Meson笔记"><a href="#Meson笔记" class="headerlink" title="Meson笔记"></a>Meson笔记</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><h3 id="Linux安装-1"><a href="#Linux安装-1" class="headerlink" title="Linux安装"></a>Linux安装</h3><ul><li><p>Meson基于Python3运行，要求Python版本3.5以上</p></li><li><p>安装依赖 <code>ninja-build</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ninja-build</span><br></pre></td></tr></table></figure></li><li><p>安装<code>Meson</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install meson #root      </span><br><span class="line"></span><br><span class="line">pip3 install --user meson #user 官方推荐</span><br></pre></td></tr></table></figure></li><li><p>也从<code>git</code>下载安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mesonbuild/meson.git /path/to/sourcedir</span><br></pre></td></tr></table></figure></li></ul><h3 id="Meson构建示例"><a href="#Meson构建示例" class="headerlink" title="Meson构建示例"></a>Meson构建示例</h3><p>依然经典的<code>helloworld</code>，首先创建一个<code>main.c</code>包含源的文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello there.\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们创建一个 <code>meson.build</code>同一个目录中调用的文中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">project(&#x27;tutorial&#x27;, &#x27;c&#x27;)</span><br><span class="line">executable(&#x27;main&#x27;, &#x27;main.c&#x27;)</span><br></pre></td></tr></table></figure><p>文件目录如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|-- test_meson</span><br><span class="line">    |-- main.c</span><br><span class="line">    |-- meson.build</span><br></pre></td></tr></table></figure><p>现在准备构建我们的应用程序，导航到文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#构建程序</span><br><span class="line">$ meson build</span><br></pre></td></tr></table></figure><p>创建一个单独的构建目录<code>build</code>来保存所有编译器输出。<code>Meson</code> 与其他一些构建系统的不同之处在于它不允许源代码构建。您必须始终创建一个单独的构建目录。常见的约定是将默认构建目录放在顶级源目录的子目录中</p><p>当 <code>Meson</code> 运行时，它会打印以下输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">The Meson build system</span><br><span class="line">Version: 0.58.1</span><br><span class="line">Source dir: /root/share/C++/test_meson</span><br><span class="line">Build dir: /root/share/C++/test_meson/build</span><br><span class="line">Build type: native build</span><br><span class="line">Project name: tutorial</span><br><span class="line">Project version: undefined</span><br><span class="line">C compiler for the host machine: cc (gcc 7.5.0 &quot;cc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0&quot;)</span><br><span class="line">C linker for the host machine: cc ld.bfd 2.30</span><br><span class="line">Host machine cpu family: x86_64</span><br><span class="line">Host machine cpu: x86_64</span><br><span class="line">Build targets in project: 1</span><br></pre></td></tr></table></figure><p>现在已经准备好构建我们的代码了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd buildd</span><br><span class="line">$ ninja</span><br></pre></td></tr></table></figure><p>如果您的 <code>Meson</code> 版本高于 <code>0.55.0</code>，您可以使用新的后端不可知构建命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd build</span><br><span class="line">$ meson compile</span><br></pre></td></tr></table></figure><p>一旦构建了可执行文件，我们就可以运行它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./main</span><br></pre></td></tr></table></figure><p>这会产生预期的输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello there.</span><br></pre></td></tr></table></figure><p>​    </p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://mubu.com/doc/t1VDCEn4O0#o-17f166a665726b18d">https://mubu.com/doc/t1VDCEn4O0#o-17f166a665726b18d</a></p><p><a href="https://cmake.org/documentation">https://cmake.org/documentation</a></p><p><a href="https://cmake.org/cmake/help/latest/guide/tutorial/index.html">https://cmake.org/cmake/help/latest/guide/tutorial/index.html</a></p><p><a href="https://mesonbuild.com/">https://mesonbuild.com/</a></p>]]></content>
    
    
    <summary type="html">学习生产力工具CMake、Meson</summary>
    
    
    
    <category term="Tools" scheme="http://example.com/categories/Tools/"/>
    
    
    <category term="CMake" scheme="http://example.com/tags/CMake/"/>
    
    <category term="Meson" scheme="http://example.com/tags/Meson/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm</title>
    <link href="http://example.com/2021/02/21/Algorithm/"/>
    <id>http://example.com/2021/02/21/Algorithm/</id>
    <published>2021-02-21T13:32:33.000Z</published>
    <updated>2021-07-21T14:29:21.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h1><h2 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;&quot;</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><p>这里可以建立一个 <code>HashMap</code>，建立每个字符和其最后出现位置之间的映射，然后需要定义两个变量 <code>res</code> 和 <code>left</code>，其中<code>res</code>用来记录最长无重复子串的长度，<code>left </code>指向该无重复子串左边的起始位置的前一个，由于是前一个，所以初始化就是 -1，然后遍历整个字符串，对于每一个遍历到的字符，如果该字符已经在 <code>HashMap</code> 中存在了，并且如果其映射值大于<code> left</code> 的话，那么更新<code> left</code> 为当前映射值。然后映射值更新为当前坐标<code>i</code>，这样保证了 <code>left </code>始终为当前边界的前一个位置，然后计算窗口长度的时候，直接用<code>i-left</code>即可，用来更新结果<code>res</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, left = <span class="number">-1</span>, n = s.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.<span class="built_in">count</span>(s[i]) &amp;&amp; m[s[i]] &gt; left) &#123;</span><br><span class="line">                left = m[s[i]];  </span><br><span class="line">            &#125;</span><br><span class="line">            m[s[i]] = i;</span><br><span class="line">            res = <span class="built_in">max</span>(res, i - left);            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面这种解法使用了 <code>HashSet</code>，核心算法和上面的很类似，把出现过的字符都放入<code>HashSet</code>中，遇到 <code>HashSet </code>中没有的字符就加入<code> HashSet</code> 中并更新结果 <code>res</code>，如果遇到重复的，则从左边开始删字符，直到删到重复的字符停止。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>, res=<span class="number">0</span>;</span><br><span class="line">        unordered_set&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(st.<span class="built_in">find</span>(s[i])!=st.<span class="built_in">end</span>())&#123;</span><br><span class="line">                st.<span class="built_in">erase</span>(s[left]);</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            st.<span class="built_in">insert</span>(s[i]);</span><br><span class="line">            res=<span class="built_in">max</span>(res,i-left+<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76. 最小覆盖子串"></a><a href="https://leetcode-cn.com/problems/minimum-window-substring/">76. 最小覆盖子串</a></h2><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p><p><strong>注意：</strong></p><ul><li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li><li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li></ul><p> <strong>进阶：</strong>你能设计一个在 <code>o(n)</code> 时间内解决此问题的算法吗？</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class="line">输出：&quot;BANC&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;, t = &quot;a&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;a&quot;, t = &quot;aa&quot;</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: t 中两个字符 &#x27;a&#x27; 均应包含在 s 的子串中，</span><br><span class="line">因此没有符合条件的子字符串，返回空字符串。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length, t.length &lt;= 105</code></li><li><code>s</code> 和 <code>t</code> 由英文字母组成</li></ul><p>这道题给了我们一个原字符串<code>s</code>，还有一个目标字符串<code>t</code>，让在<code>s</code>中找到一个最短的子串，使得其包含了<code>t</code>中的所有的字母，并且限制了时间复杂度为<code> O(n)</code>。这道题的要求是要在<code>O(n) </code>的时间度里实现找到这个最小窗口字串，暴力搜索 <code>Brute Force </code>肯定是不能用的，因为遍历所有的子串的时间复杂度是平方级的。那么来想一下，时间复杂度卡的这么严，说明必须在一次遍历中完成任务，当然遍历若干次也是<code> O(n)</code>，但不一定有这个必要，尝试就一次遍历拿下！那么再来想，既然要包含T中所有的字母，那么对于T中的每个字母，肯定要快速查找是否在子串中，既然总时间都卡在了<code> O(n)</code>，肯定不想在这里还浪费时间，就用空间换时间（也就算法题中可以这么干了，七老八十的富翁就算用大别野也换不来时间啊。依依东望，望的就是时间呐），使用<code> HashMap</code>，建立T中每个字母与其出现次数之间的映射，那么你可能会有疑问，为啥用 <code>HashMap </code>不用 <code>HashSet </code>呢？</p><p>为啥要用 <code>HashMap</code>，而不是 <code>HashSet</code>，因为要统计<code>t</code>串中字母的个数，而不是仅仅看某个字母是否在<code>t</code>串中出现。统计好<code>t</code>串中字母的个数了之后，开始遍历<code>s</code>串，对于<code>s</code>中的每个遍历到的字母，都在<code>HashMap</code>中的映射值减1，如果减1后的映射值仍大于等于0，说明当前遍历到的字母是T串中的字母，使用一个计数器<code> cnt</code>，使其自增1。当<code>cnt</code> 和T串字母个数相等时，说明此时的窗口已经包含了T串中的所有字母，此时更新一个<code> minLen</code> 和结果 <code>res</code>，这里的 <code>minLen</code> 是一个全局变量，用来记录出现过的包含T串所有字母的最短的子串的长度，结果 res 就是这个最短的子串。然后开始收缩左边界，由于遍历的时候，对映射值减了1，所以此时去除字母的时候，就要把减去的1加回来，此时如果加1后的值大于0了，说明此时少了一个T中的字母，那么<code>cnt</code>值就要减1了，然后移动左边界<code>left</code>。你可能会疑问，对于不在T串中的字母的映射值也这么加呀减呀的，真的大丈夫（带胶布）吗？其实没啥事，因为对于不在T串中的字母，减1后，变-1，<code>cnt </code>不会增加，之后收缩左边界的时候，映射值加1后为0，<code>cnt </code>也不会减少，所以并没有什么影响啦。下面是具体的代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">minWindow</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        unordered_map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; letterCnt;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, cnt = <span class="number">0</span>, minLen = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : t) ++letterCnt[c];         <span class="comment">//遍历t</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (--letterCnt[s[i]] &gt;= <span class="number">0</span>) ++cnt;   <span class="comment">//--letterCnt[s[i]] &gt;= 0，s[i]在t中</span></span><br><span class="line">            <span class="keyword">while</span> (cnt == t.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (minLen &gt; i - left + <span class="number">1</span>) &#123;</span><br><span class="line">                    minLen = i - left + <span class="number">1</span>;</span><br><span class="line">                    res = s.<span class="built_in">substr</span>(left, minLen); <span class="comment">//从left开始，长度为minLen的字符串</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//收缩左边界 ++letterCnt[s[left]] &gt; 0， 0-&gt;1 该元素在t中，</span></span><br><span class="line">                <span class="keyword">if</span> (++letterCnt[s[left]] &gt; <span class="number">0</span>) --cnt;   </span><br><span class="line">                <span class="comment">//因为不在t中的本来为0，先减去，现在再增加，最终还是0.</span></span><br><span class="line">                ++left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">整理记录刷的算法题，好记性不如烂笔头啊！题解参考了Grand Yang(https://github.com/grandyang)</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/02/14/hello-world/"/>
    <id>http://example.com/2021/02/14/hello-world/</id>
    <published>2021-02-13T16:00:00.000Z</published>
    <updated>2021-07-11T06:57:09.659Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Install-hexo"><a href="#Install-hexo" class="headerlink" title="Install hexo"></a>Install hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="Create-myblog"><a href="#Create-myblog" class="headerlink" title="Create myblog"></a>Create myblog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init myblog</span><br></pre></td></tr></table></figure><p><strong>出现 hexo init 失败问题，<a href="https://blog.csdn.net/qq_43580193/article/details/117341489?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&spm=1001.2101.3001.4242">解决方法</a>替换Github连接</strong></p><h3 id="将Hexo部署到GitHub"><a href="#将Hexo部署到GitHub" class="headerlink" title="将Hexo部署到GitHub"></a>将Hexo部署到GitHub</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git #冒号后面有空格</span><br><span class="line">  repository: git@github.com:xuhuigeren/xuhuigeren.github.io.git  #ssh/https仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><strong>回到 myblog 文件夹中，打开 Git Bash，安装Git部署插件，输入命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><strong>然后分别输入以下三条命令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   <span class="comment">#清除缓存文件 db.json 和已生成的静态文件 public</span></span><br><span class="line">hexo g       <span class="comment">#生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span></span><br><span class="line">hexo d       <span class="comment">#自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span></span><br></pre></td></tr></table></figure><p><strong>完成以后，打开浏览器，输入 <a href="https://xuhuigeren.github.io/">https://xuhuigeren.github.io</a>  就可以打开你的网页了</strong></p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">Welcome to Hexo</summary>
    
    
    
    <category term="我的博客" scheme="http://example.com/categories/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
